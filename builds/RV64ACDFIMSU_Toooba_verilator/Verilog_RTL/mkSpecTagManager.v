//
// Generated by Bluespec Compiler (build 0fccbb13)
//
// On Tue Aug 31 13:05:43 EDT 2021
//
//
// Ports:
// Name                         I/O  size props
// currentSpecBits                O    12
// RDY_currentSpecBits            O     1 const
// nextSpecTag                    O     4
// RDY_nextSpecTag                O     1
// RDY_claimSpecTag               O     1
// canClaim                       O     1
// RDY_canClaim                   O     1 const
// RDY_specUpdate_incorrectSpeculation  O     1 const
// RDY_specUpdate_correctSpeculation  O     1 const
// isFull_ehrPort0                O     1
// RDY_isFull_ehrPort0            O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// specUpdate_incorrectSpeculation_kill_all  I     1
// specUpdate_incorrectSpeculation_kill_tag  I     4
// specUpdate_correctSpeculation_mask  I    12
// EN_claimSpecTag                I     1
// EN_specUpdate_incorrectSpeculation  I     1
// EN_specUpdate_correctSpeculation  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSpecTagManager(CLK,
			RST_N,

			currentSpecBits,
			RDY_currentSpecBits,

			nextSpecTag,
			RDY_nextSpecTag,

			EN_claimSpecTag,
			RDY_claimSpecTag,

			canClaim,
			RDY_canClaim,

			specUpdate_incorrectSpeculation_kill_all,
			specUpdate_incorrectSpeculation_kill_tag,
			EN_specUpdate_incorrectSpeculation,
			RDY_specUpdate_incorrectSpeculation,

			specUpdate_correctSpeculation_mask,
			EN_specUpdate_correctSpeculation,
			RDY_specUpdate_correctSpeculation,

			isFull_ehrPort0,
			RDY_isFull_ehrPort0);
  input  CLK;
  input  RST_N;

  // value method currentSpecBits
  output [11 : 0] currentSpecBits;
  output RDY_currentSpecBits;

  // value method nextSpecTag
  output [3 : 0] nextSpecTag;
  output RDY_nextSpecTag;

  // action method claimSpecTag
  input  EN_claimSpecTag;
  output RDY_claimSpecTag;

  // value method canClaim
  output canClaim;
  output RDY_canClaim;

  // action method specUpdate_incorrectSpeculation
  input  specUpdate_incorrectSpeculation_kill_all;
  input  [3 : 0] specUpdate_incorrectSpeculation_kill_tag;
  input  EN_specUpdate_incorrectSpeculation;
  output RDY_specUpdate_incorrectSpeculation;

  // action method specUpdate_correctSpeculation
  input  [11 : 0] specUpdate_correctSpeculation_mask;
  input  EN_specUpdate_correctSpeculation;
  output RDY_specUpdate_correctSpeculation;

  // value method isFull_ehrPort0
  output isFull_ehrPort0;
  output RDY_isFull_ehrPort0;

  // signals for module outputs
  wire [11 : 0] currentSpecBits;
  wire [3 : 0] nextSpecTag;
  wire RDY_canClaim,
       RDY_claimSpecTag,
       RDY_currentSpecBits,
       RDY_isFull_ehrPort0,
       RDY_nextSpecTag,
       RDY_specUpdate_correctSpeculation,
       RDY_specUpdate_incorrectSpeculation,
       canClaim,
       isFull_ehrPort0;

  // inlined wires
  wire current_spec_bits_ehr_lat_0$whas, wrongSpec_claim_conflict$whas;

  // register current_spec_bits_ehr_rl
  reg [11 : 0] current_spec_bits_ehr_rl;
  wire [11 : 0] current_spec_bits_ehr_rl$D_IN;
  wire current_spec_bits_ehr_rl$EN;

  // register dependent_checkpoints_0
  reg [11 : 0] dependent_checkpoints_0;
  wire [11 : 0] dependent_checkpoints_0$D_IN;
  wire dependent_checkpoints_0$EN;

  // register dependent_checkpoints_1
  reg [11 : 0] dependent_checkpoints_1;
  wire [11 : 0] dependent_checkpoints_1$D_IN;
  wire dependent_checkpoints_1$EN;

  // register dependent_checkpoints_10
  reg [11 : 0] dependent_checkpoints_10;
  wire [11 : 0] dependent_checkpoints_10$D_IN;
  wire dependent_checkpoints_10$EN;

  // register dependent_checkpoints_11
  reg [11 : 0] dependent_checkpoints_11;
  wire [11 : 0] dependent_checkpoints_11$D_IN;
  wire dependent_checkpoints_11$EN;

  // register dependent_checkpoints_2
  reg [11 : 0] dependent_checkpoints_2;
  wire [11 : 0] dependent_checkpoints_2$D_IN;
  wire dependent_checkpoints_2$EN;

  // register dependent_checkpoints_3
  reg [11 : 0] dependent_checkpoints_3;
  wire [11 : 0] dependent_checkpoints_3$D_IN;
  wire dependent_checkpoints_3$EN;

  // register dependent_checkpoints_4
  reg [11 : 0] dependent_checkpoints_4;
  wire [11 : 0] dependent_checkpoints_4$D_IN;
  wire dependent_checkpoints_4$EN;

  // register dependent_checkpoints_5
  reg [11 : 0] dependent_checkpoints_5;
  wire [11 : 0] dependent_checkpoints_5$D_IN;
  wire dependent_checkpoints_5$EN;

  // register dependent_checkpoints_6
  reg [11 : 0] dependent_checkpoints_6;
  wire [11 : 0] dependent_checkpoints_6$D_IN;
  wire dependent_checkpoints_6$EN;

  // register dependent_checkpoints_7
  reg [11 : 0] dependent_checkpoints_7;
  wire [11 : 0] dependent_checkpoints_7$D_IN;
  wire dependent_checkpoints_7$EN;

  // register dependent_checkpoints_8
  reg [11 : 0] dependent_checkpoints_8;
  wire [11 : 0] dependent_checkpoints_8$D_IN;
  wire dependent_checkpoints_8$EN;

  // register dependent_checkpoints_9
  reg [11 : 0] dependent_checkpoints_9;
  wire [11 : 0] dependent_checkpoints_9$D_IN;
  wire dependent_checkpoints_9$EN;

  // ports of submodule current_spec_bits_ehr_dummy2_0
  wire current_spec_bits_ehr_dummy2_0$D_IN,
       current_spec_bits_ehr_dummy2_0$EN,
       current_spec_bits_ehr_dummy2_0$Q_OUT;

  // ports of submodule current_spec_bits_ehr_dummy2_1
  wire current_spec_bits_ehr_dummy2_1$D_IN,
       current_spec_bits_ehr_dummy2_1$EN,
       current_spec_bits_ehr_dummy2_1$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_current_spec_bits_ehr_canon,
       CAN_FIRE_RL_debugSt,
       CAN_FIRE_claimSpecTag,
       CAN_FIRE_specUpdate_correctSpeculation,
       CAN_FIRE_specUpdate_incorrectSpeculation,
       WILL_FIRE_RL_current_spec_bits_ehr_canon,
       WILL_FIRE_RL_debugSt,
       WILL_FIRE_claimSpecTag,
       WILL_FIRE_specUpdate_correctSpeculation,
       WILL_FIRE_specUpdate_incorrectSpeculation;

  // inputs to muxes for submodule ports
  wire [11 : 0] MUX_current_spec_bits_ehr_lat_0$wset_1__VAL_1,
		MUX_current_spec_bits_ehr_lat_0$wset_1__VAL_2;

  // remaining internal signals
  reg [11 : 0] x__h9501;
  wire [11 : 0] IF_current_spec_bits_ehr_lat_0_whas_THEN_IF_cu_ETC___d8,
		_dfoo110,
		_dfoo112,
		_dfoo114,
		_dfoo116,
		_dfoo118,
		_dfoo120,
		_dfoo136,
		_dfoo138,
		_dfoo140,
		_dfoo142,
		_dfoo144,
		_dfoo146,
		_dfoo148,
		_dfoo162,
		_dfoo164,
		_dfoo166,
		_dfoo168,
		_dfoo170,
		_dfoo172,
		_dfoo174,
		_dfoo176,
		_dfoo188,
		_dfoo190,
		_dfoo192,
		_dfoo194,
		_dfoo196,
		_dfoo198,
		_dfoo2,
		_dfoo200,
		_dfoo202,
		_dfoo204,
		_dfoo214,
		_dfoo216,
		_dfoo218,
		_dfoo220,
		_dfoo222,
		_dfoo224,
		_dfoo226,
		_dfoo228,
		_dfoo230,
		_dfoo232,
		_dfoo240,
		_dfoo242,
		_dfoo244,
		_dfoo246,
		_dfoo248,
		_dfoo250,
		_dfoo252,
		_dfoo254,
		_dfoo256,
		_dfoo258,
		_dfoo260,
		_dfoo32,
		_dfoo34,
		_dfoo36,
		_dfoo58,
		_dfoo6,
		_dfoo60,
		_dfoo62,
		_dfoo64,
		_dfoo8,
		_dfoo84,
		_dfoo86,
		_dfoo88,
		_dfoo90,
		_dfoo92,
		n__read__h9626,
		upd__h1000,
		upd__h1027,
		w__h2551,
		x__h3115,
		x__h3496,
		x__h4015,
		x__h4534,
		x__h5053,
		x__h5572,
		x__h6091,
		x__h6610,
		x__h7129,
		x__h7648,
		x__h8167,
		x__h8686,
		x__h9205,
		x__h9465,
		y__h9500;
  wire [3 : 0] valid_spec_tag__h2507;

  // value method currentSpecBits
  assign currentSpecBits =
	     (current_spec_bits_ehr_dummy2_0$Q_OUT &&
	      current_spec_bits_ehr_dummy2_1$Q_OUT) ?
	       current_spec_bits_ehr_rl :
	       12'd0 ;
  assign RDY_currentSpecBits = 1'd1 ;

  // value method nextSpecTag
  assign nextSpecTag =
	     w__h2551[0] ?
	       (w__h2551[1] ?
		  (w__h2551[2] ?
		     (w__h2551[3] ?
			(w__h2551[4] ?
			   (w__h2551[5] ?
			      (w__h2551[6] ?
				 (w__h2551[7] ?
				    (w__h2551[8] ?
				       (w__h2551[9] ?
					  (w__h2551[10] ? 4'd11 : 4'd10) :
					  4'd9) :
				       4'd8) :
				    4'd7) :
				 4'd6) :
			      4'd5) :
			   4'd4) :
			4'd3) :
		     4'd2) :
		  4'd1) :
	       4'd0 ;
  assign RDY_nextSpecTag = canClaim ;

  // action method claimSpecTag
  assign RDY_claimSpecTag = canClaim ;
  assign CAN_FIRE_claimSpecTag = canClaim ;
  assign WILL_FIRE_claimSpecTag = EN_claimSpecTag ;

  // value method canClaim
  assign canClaim =
	     !w__h2551[0] || !w__h2551[1] || !w__h2551[2] || !w__h2551[3] ||
	     !w__h2551[4] ||
	     !w__h2551[5] ||
	     !w__h2551[6] ||
	     !w__h2551[7] ||
	     !w__h2551[8] ||
	     !w__h2551[9] ||
	     !w__h2551[10] ||
	     !w__h2551[11] ;
  assign RDY_canClaim = 1'd1 ;

  // action method specUpdate_incorrectSpeculation
  assign RDY_specUpdate_incorrectSpeculation = 1'd1 ;
  assign CAN_FIRE_specUpdate_incorrectSpeculation = 1'd1 ;
  assign WILL_FIRE_specUpdate_incorrectSpeculation =
	     EN_specUpdate_incorrectSpeculation ;

  // action method specUpdate_correctSpeculation
  assign RDY_specUpdate_correctSpeculation = 1'd1 ;
  assign CAN_FIRE_specUpdate_correctSpeculation = 1'd1 ;
  assign WILL_FIRE_specUpdate_correctSpeculation =
	     EN_specUpdate_correctSpeculation ;

  // value method isFull_ehrPort0
  assign isFull_ehrPort0 =
	     w__h2551[0] && w__h2551[1] && w__h2551[2] && w__h2551[3] &&
	     w__h2551[4] &&
	     w__h2551[5] &&
	     w__h2551[6] &&
	     w__h2551[7] &&
	     w__h2551[8] &&
	     w__h2551[9] &&
	     w__h2551[10] &&
	     w__h2551[11] ;
  assign RDY_isFull_ehrPort0 = 1'd1 ;

  // submodule current_spec_bits_ehr_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) current_spec_bits_ehr_dummy2_0(.CLK(CLK),
							  .D_IN(current_spec_bits_ehr_dummy2_0$D_IN),
							  .EN(current_spec_bits_ehr_dummy2_0$EN),
							  .Q_OUT(current_spec_bits_ehr_dummy2_0$Q_OUT));

  // submodule current_spec_bits_ehr_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) current_spec_bits_ehr_dummy2_1(.CLK(CLK),
							  .D_IN(current_spec_bits_ehr_dummy2_1$D_IN),
							  .EN(current_spec_bits_ehr_dummy2_1$EN),
							  .Q_OUT(current_spec_bits_ehr_dummy2_1$Q_OUT));

  // rule RL_debugSt
  assign CAN_FIRE_RL_debugSt = 1'd1 ;
  assign WILL_FIRE_RL_debugSt = 1'd1 ;

  // rule RL_current_spec_bits_ehr_canon
  assign CAN_FIRE_RL_current_spec_bits_ehr_canon = 1'd1 ;
  assign WILL_FIRE_RL_current_spec_bits_ehr_canon = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_current_spec_bits_ehr_lat_0$wset_1__VAL_1 = w__h2551 | x__h3115 ;
  assign MUX_current_spec_bits_ehr_lat_0$wset_1__VAL_2 =
	     specUpdate_incorrectSpeculation_kill_all ? 12'd0 : x__h9465 ;

  // inlined wires
  assign current_spec_bits_ehr_lat_0$whas =
	     EN_claimSpecTag || EN_specUpdate_incorrectSpeculation ;
  assign wrongSpec_claim_conflict$whas =
	     EN_specUpdate_incorrectSpeculation || EN_claimSpecTag ;

  // register current_spec_bits_ehr_rl
  assign current_spec_bits_ehr_rl$D_IN =
	     EN_specUpdate_correctSpeculation ?
	       upd__h1000 :
	       IF_current_spec_bits_ehr_lat_0_whas_THEN_IF_cu_ETC___d8 ;
  assign current_spec_bits_ehr_rl$EN = 1'd1 ;

  // register dependent_checkpoints_0
  assign dependent_checkpoints_0$D_IN = w__h2551[0] ? x__h3496 : x__h3115 ;
  assign dependent_checkpoints_0$EN =
	     EN_claimSpecTag &&
	     (w__h2551[0] || valid_spec_tag__h2507 == 4'd0 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd0 && w__h2551[0] && !w__h2551[1] ||
	      valid_spec_tag__h2507 == 4'd0 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2] ||
	      valid_spec_tag__h2507 == 4'd0 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3] ||
	      valid_spec_tag__h2507 == 4'd0 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4] ||
	      valid_spec_tag__h2507 == 4'd0 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5] ||
	      valid_spec_tag__h2507 == 4'd0 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6] ||
	      valid_spec_tag__h2507 == 4'd0 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      !w__h2551[7] ||
	      valid_spec_tag__h2507 == 4'd0 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      !w__h2551[8] ||
	      valid_spec_tag__h2507 == 4'd0 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      !w__h2551[9] ||
	      valid_spec_tag__h2507 == 4'd0 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      w__h2551[9]) ;

  // register dependent_checkpoints_1
  assign dependent_checkpoints_1$D_IN =
	     (valid_spec_tag__h2507 == 4'd1 && !w__h2551[0]) ?
	       x__h3115 :
	       _dfoo260 ;
  assign dependent_checkpoints_1$EN =
	     EN_claimSpecTag &&
	     (valid_spec_tag__h2507 == 4'd1 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd1 && w__h2551[0] && !w__h2551[1] ||
	      w__h2551[1]) ;

  // register dependent_checkpoints_10
  assign dependent_checkpoints_10$D_IN =
	     (valid_spec_tag__h2507 == 4'd10 && !w__h2551[0]) ?
	       x__h3115 :
	       _dfoo242 ;
  assign dependent_checkpoints_10$EN =
	     EN_claimSpecTag &&
	     (valid_spec_tag__h2507 == 4'd10 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && !w__h2551[1] ||
	      valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2] ||
	      valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3] ||
	      valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4] ||
	      valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5] ||
	      valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6] ||
	      valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      !w__h2551[7] ||
	      valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      !w__h2551[8] ||
	      valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      !w__h2551[9] ||
	      valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      w__h2551[9] &&
	      !w__h2551[10] ||
	      w__h2551[10]) ;

  // register dependent_checkpoints_11
  assign dependent_checkpoints_11$D_IN =
	     (valid_spec_tag__h2507 == 4'd11 && !w__h2551[0]) ?
	       x__h3115 :
	       _dfoo240 ;
  assign dependent_checkpoints_11$EN =
	     EN_claimSpecTag &&
	     (valid_spec_tag__h2507 == 4'd11 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && !w__h2551[1] ||
	      valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2] ||
	      valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3] ||
	      valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4] ||
	      valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5] ||
	      valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6] ||
	      valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      !w__h2551[7] ||
	      valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      !w__h2551[8] ||
	      valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      !w__h2551[9] ||
	      valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      w__h2551[9] &&
	      !w__h2551[10] ||
	      valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      w__h2551[9] &&
	      w__h2551[10] ||
	      (!w__h2551[0] || !w__h2551[1] || !w__h2551[2] || !w__h2551[3] ||
	       !w__h2551[4] ||
	       !w__h2551[5] ||
	       !w__h2551[6] ||
	       !w__h2551[7] ||
	       !w__h2551[8] ||
	       !w__h2551[9] ||
	       !w__h2551[10]) &&
	      w__h2551[11]) ;

  // register dependent_checkpoints_2
  assign dependent_checkpoints_2$D_IN =
	     (valid_spec_tag__h2507 == 4'd2 && !w__h2551[0]) ?
	       x__h3115 :
	       _dfoo258 ;
  assign dependent_checkpoints_2$EN =
	     EN_claimSpecTag &&
	     (valid_spec_tag__h2507 == 4'd2 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd2 && w__h2551[0] && !w__h2551[1] ||
	      valid_spec_tag__h2507 == 4'd2 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2] ||
	      w__h2551[2]) ;

  // register dependent_checkpoints_3
  assign dependent_checkpoints_3$D_IN =
	     (valid_spec_tag__h2507 == 4'd3 && !w__h2551[0]) ?
	       x__h3115 :
	       _dfoo256 ;
  assign dependent_checkpoints_3$EN =
	     EN_claimSpecTag &&
	     (valid_spec_tag__h2507 == 4'd3 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd3 && w__h2551[0] && !w__h2551[1] ||
	      valid_spec_tag__h2507 == 4'd3 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2] ||
	      valid_spec_tag__h2507 == 4'd3 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3] ||
	      w__h2551[3]) ;

  // register dependent_checkpoints_4
  assign dependent_checkpoints_4$D_IN =
	     (valid_spec_tag__h2507 == 4'd4 && !w__h2551[0]) ?
	       x__h3115 :
	       _dfoo254 ;
  assign dependent_checkpoints_4$EN =
	     EN_claimSpecTag &&
	     (valid_spec_tag__h2507 == 4'd4 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd4 && w__h2551[0] && !w__h2551[1] ||
	      valid_spec_tag__h2507 == 4'd4 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2] ||
	      valid_spec_tag__h2507 == 4'd4 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3] ||
	      valid_spec_tag__h2507 == 4'd4 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4] ||
	      w__h2551[4]) ;

  // register dependent_checkpoints_5
  assign dependent_checkpoints_5$D_IN =
	     (valid_spec_tag__h2507 == 4'd5 && !w__h2551[0]) ?
	       x__h3115 :
	       _dfoo252 ;
  assign dependent_checkpoints_5$EN =
	     EN_claimSpecTag &&
	     (valid_spec_tag__h2507 == 4'd5 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd5 && w__h2551[0] && !w__h2551[1] ||
	      valid_spec_tag__h2507 == 4'd5 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2] ||
	      valid_spec_tag__h2507 == 4'd5 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3] ||
	      valid_spec_tag__h2507 == 4'd5 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4] ||
	      valid_spec_tag__h2507 == 4'd5 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5] ||
	      w__h2551[5]) ;

  // register dependent_checkpoints_6
  assign dependent_checkpoints_6$D_IN =
	     (valid_spec_tag__h2507 == 4'd6 && !w__h2551[0]) ?
	       x__h3115 :
	       _dfoo250 ;
  assign dependent_checkpoints_6$EN =
	     EN_claimSpecTag &&
	     (valid_spec_tag__h2507 == 4'd6 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && !w__h2551[1] ||
	      valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2] ||
	      valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3] ||
	      valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4] ||
	      valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5] ||
	      valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6] ||
	      w__h2551[6]) ;

  // register dependent_checkpoints_7
  assign dependent_checkpoints_7$D_IN =
	     (valid_spec_tag__h2507 == 4'd7 && !w__h2551[0]) ?
	       x__h3115 :
	       _dfoo248 ;
  assign dependent_checkpoints_7$EN =
	     EN_claimSpecTag &&
	     (valid_spec_tag__h2507 == 4'd7 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && !w__h2551[1] ||
	      valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2] ||
	      valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3] ||
	      valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4] ||
	      valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5] ||
	      valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6] ||
	      valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      !w__h2551[7] ||
	      w__h2551[7]) ;

  // register dependent_checkpoints_8
  assign dependent_checkpoints_8$D_IN =
	     (valid_spec_tag__h2507 == 4'd8 && !w__h2551[0]) ?
	       x__h3115 :
	       _dfoo246 ;
  assign dependent_checkpoints_8$EN =
	     EN_claimSpecTag &&
	     (valid_spec_tag__h2507 == 4'd8 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && !w__h2551[1] ||
	      valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2] ||
	      valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3] ||
	      valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4] ||
	      valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5] ||
	      valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6] ||
	      valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      !w__h2551[7] ||
	      valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      !w__h2551[8] ||
	      w__h2551[8]) ;

  // register dependent_checkpoints_9
  assign dependent_checkpoints_9$D_IN =
	     (valid_spec_tag__h2507 == 4'd9 && !w__h2551[0]) ?
	       x__h3115 :
	       _dfoo244 ;
  assign dependent_checkpoints_9$EN =
	     EN_claimSpecTag &&
	     (valid_spec_tag__h2507 == 4'd9 && !w__h2551[0] ||
	      valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && !w__h2551[1] ||
	      valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2] ||
	      valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3] ||
	      valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4] ||
	      valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5] ||
	      valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6] ||
	      valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      !w__h2551[7] ||
	      valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      !w__h2551[8] ||
	      valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      !w__h2551[9] ||
	      w__h2551[9]) ;

  // submodule current_spec_bits_ehr_dummy2_0
  assign current_spec_bits_ehr_dummy2_0$D_IN = 1'd1 ;
  assign current_spec_bits_ehr_dummy2_0$EN = wrongSpec_claim_conflict$whas ;

  // submodule current_spec_bits_ehr_dummy2_1
  assign current_spec_bits_ehr_dummy2_1$D_IN = 1'd1 ;
  assign current_spec_bits_ehr_dummy2_1$EN =
	     EN_specUpdate_correctSpeculation ;

  // remaining internal signals
  assign IF_current_spec_bits_ehr_lat_0_whas_THEN_IF_cu_ETC___d8 =
	     current_spec_bits_ehr_lat_0$whas ?
	       upd__h1027 :
	       current_spec_bits_ehr_rl ;
  assign _dfoo110 =
	     (valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6]) ?
	       x__h3115 :
	       _dfoo84 ;
  assign _dfoo112 =
	     (valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6]) ?
	       x__h3115 :
	       _dfoo86 ;
  assign _dfoo114 =
	     (valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6]) ?
	       x__h3115 :
	       _dfoo88 ;
  assign _dfoo116 =
	     (valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6]) ?
	       x__h3115 :
	       _dfoo90 ;
  assign _dfoo118 =
	     (valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6]) ?
	       x__h3115 :
	       _dfoo92 ;
  assign _dfoo120 =
	     (valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      !w__h2551[6]) ?
	       x__h3115 :
	       (w__h2551[6] ? x__h6610 : x__h3115) ;
  assign _dfoo136 =
	     (valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5]) ?
	       x__h3115 :
	       _dfoo110 ;
  assign _dfoo138 =
	     (valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5]) ?
	       x__h3115 :
	       _dfoo112 ;
  assign _dfoo140 =
	     (valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5]) ?
	       x__h3115 :
	       _dfoo114 ;
  assign _dfoo142 =
	     (valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5]) ?
	       x__h3115 :
	       _dfoo116 ;
  assign _dfoo144 =
	     (valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5]) ?
	       x__h3115 :
	       _dfoo118 ;
  assign _dfoo146 =
	     (valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5]) ?
	       x__h3115 :
	       _dfoo120 ;
  assign _dfoo148 =
	     (valid_spec_tag__h2507 == 4'd5 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      !w__h2551[5]) ?
	       x__h3115 :
	       (w__h2551[5] ? x__h6091 : x__h3115) ;
  assign _dfoo162 =
	     (valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4]) ?
	       x__h3115 :
	       _dfoo136 ;
  assign _dfoo164 =
	     (valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4]) ?
	       x__h3115 :
	       _dfoo138 ;
  assign _dfoo166 =
	     (valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4]) ?
	       x__h3115 :
	       _dfoo140 ;
  assign _dfoo168 =
	     (valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4]) ?
	       x__h3115 :
	       _dfoo142 ;
  assign _dfoo170 =
	     (valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4]) ?
	       x__h3115 :
	       _dfoo144 ;
  assign _dfoo172 =
	     (valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4]) ?
	       x__h3115 :
	       _dfoo146 ;
  assign _dfoo174 =
	     (valid_spec_tag__h2507 == 4'd5 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4]) ?
	       x__h3115 :
	       _dfoo148 ;
  assign _dfoo176 =
	     (valid_spec_tag__h2507 == 4'd4 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      !w__h2551[4]) ?
	       x__h3115 :
	       (w__h2551[4] ? x__h5572 : x__h3115) ;
  assign _dfoo188 =
	     (valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3]) ?
	       x__h3115 :
	       _dfoo162 ;
  assign _dfoo190 =
	     (valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3]) ?
	       x__h3115 :
	       _dfoo164 ;
  assign _dfoo192 =
	     (valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3]) ?
	       x__h3115 :
	       _dfoo166 ;
  assign _dfoo194 =
	     (valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3]) ?
	       x__h3115 :
	       _dfoo168 ;
  assign _dfoo196 =
	     (valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3]) ?
	       x__h3115 :
	       _dfoo170 ;
  assign _dfoo198 =
	     (valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3]) ?
	       x__h3115 :
	       _dfoo172 ;
  assign _dfoo2 =
	     (valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      w__h2551[9] &&
	      w__h2551[10]) ?
	       x__h3115 :
	       x__h9205 ;
  assign _dfoo200 =
	     (valid_spec_tag__h2507 == 4'd5 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3]) ?
	       x__h3115 :
	       _dfoo174 ;
  assign _dfoo202 =
	     (valid_spec_tag__h2507 == 4'd4 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3]) ?
	       x__h3115 :
	       _dfoo176 ;
  assign _dfoo204 =
	     (valid_spec_tag__h2507 == 4'd3 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      !w__h2551[3]) ?
	       x__h3115 :
	       (w__h2551[3] ? x__h5053 : x__h3115) ;
  assign _dfoo214 =
	     (valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2]) ?
	       x__h3115 :
	       _dfoo188 ;
  assign _dfoo216 =
	     (valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2]) ?
	       x__h3115 :
	       _dfoo190 ;
  assign _dfoo218 =
	     (valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2]) ?
	       x__h3115 :
	       _dfoo192 ;
  assign _dfoo220 =
	     (valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2]) ?
	       x__h3115 :
	       _dfoo194 ;
  assign _dfoo222 =
	     (valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2]) ?
	       x__h3115 :
	       _dfoo196 ;
  assign _dfoo224 =
	     (valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2]) ?
	       x__h3115 :
	       _dfoo198 ;
  assign _dfoo226 =
	     (valid_spec_tag__h2507 == 4'd5 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2]) ?
	       x__h3115 :
	       _dfoo200 ;
  assign _dfoo228 =
	     (valid_spec_tag__h2507 == 4'd4 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2]) ?
	       x__h3115 :
	       _dfoo202 ;
  assign _dfoo230 =
	     (valid_spec_tag__h2507 == 4'd3 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2]) ?
	       x__h3115 :
	       _dfoo204 ;
  assign _dfoo232 =
	     (valid_spec_tag__h2507 == 4'd2 && w__h2551[0] && w__h2551[1] &&
	      !w__h2551[2]) ?
	       x__h3115 :
	       (w__h2551[2] ? x__h4534 : x__h3115) ;
  assign _dfoo240 =
	     (valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && !w__h2551[1]) ?
	       x__h3115 :
	       _dfoo214 ;
  assign _dfoo242 =
	     (valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && !w__h2551[1]) ?
	       x__h3115 :
	       _dfoo216 ;
  assign _dfoo244 =
	     (valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && !w__h2551[1]) ?
	       x__h3115 :
	       _dfoo218 ;
  assign _dfoo246 =
	     (valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && !w__h2551[1]) ?
	       x__h3115 :
	       _dfoo220 ;
  assign _dfoo248 =
	     (valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && !w__h2551[1]) ?
	       x__h3115 :
	       _dfoo222 ;
  assign _dfoo250 =
	     (valid_spec_tag__h2507 == 4'd6 && w__h2551[0] && !w__h2551[1]) ?
	       x__h3115 :
	       _dfoo224 ;
  assign _dfoo252 =
	     (valid_spec_tag__h2507 == 4'd5 && w__h2551[0] && !w__h2551[1]) ?
	       x__h3115 :
	       _dfoo226 ;
  assign _dfoo254 =
	     (valid_spec_tag__h2507 == 4'd4 && w__h2551[0] && !w__h2551[1]) ?
	       x__h3115 :
	       _dfoo228 ;
  assign _dfoo256 =
	     (valid_spec_tag__h2507 == 4'd3 && w__h2551[0] && !w__h2551[1]) ?
	       x__h3115 :
	       _dfoo230 ;
  assign _dfoo258 =
	     (valid_spec_tag__h2507 == 4'd2 && w__h2551[0] && !w__h2551[1]) ?
	       x__h3115 :
	       _dfoo232 ;
  assign _dfoo260 =
	     (valid_spec_tag__h2507 == 4'd1 && w__h2551[0] && !w__h2551[1]) ?
	       x__h3115 :
	       (w__h2551[1] ? x__h4015 : x__h3115) ;
  assign _dfoo32 =
	     (valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      !w__h2551[9]) ?
	       x__h3115 :
	       _dfoo6 ;
  assign _dfoo34 =
	     (valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      !w__h2551[9]) ?
	       x__h3115 :
	       _dfoo8 ;
  assign _dfoo36 =
	     (valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      !w__h2551[9]) ?
	       x__h3115 :
	       (w__h2551[9] ? x__h8167 : x__h3115) ;
  assign _dfoo58 =
	     (valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      !w__h2551[8]) ?
	       x__h3115 :
	       _dfoo32 ;
  assign _dfoo6 =
	     (valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      w__h2551[9] &&
	      !w__h2551[10]) ?
	       x__h3115 :
	       _dfoo2 ;
  assign _dfoo60 =
	     (valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      !w__h2551[8]) ?
	       x__h3115 :
	       _dfoo34 ;
  assign _dfoo62 =
	     (valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      !w__h2551[8]) ?
	       x__h3115 :
	       _dfoo36 ;
  assign _dfoo64 =
	     (valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      !w__h2551[8]) ?
	       x__h3115 :
	       (w__h2551[8] ? x__h7648 : x__h3115) ;
  assign _dfoo8 =
	     (valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      w__h2551[7] &&
	      w__h2551[8] &&
	      w__h2551[9] &&
	      !w__h2551[10]) ?
	       x__h3115 :
	       (w__h2551[10] ? x__h8686 : x__h3115) ;
  assign _dfoo84 =
	     (valid_spec_tag__h2507 == 4'd11 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      !w__h2551[7]) ?
	       x__h3115 :
	       _dfoo58 ;
  assign _dfoo86 =
	     (valid_spec_tag__h2507 == 4'd10 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      !w__h2551[7]) ?
	       x__h3115 :
	       _dfoo60 ;
  assign _dfoo88 =
	     (valid_spec_tag__h2507 == 4'd9 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      !w__h2551[7]) ?
	       x__h3115 :
	       _dfoo62 ;
  assign _dfoo90 =
	     (valid_spec_tag__h2507 == 4'd8 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      !w__h2551[7]) ?
	       x__h3115 :
	       _dfoo64 ;
  assign _dfoo92 =
	     (valid_spec_tag__h2507 == 4'd7 && w__h2551[0] && w__h2551[1] &&
	      w__h2551[2] &&
	      w__h2551[3] &&
	      w__h2551[4] &&
	      w__h2551[5] &&
	      w__h2551[6] &&
	      !w__h2551[7]) ?
	       x__h3115 :
	       (w__h2551[7] ? x__h7129 : x__h3115) ;
  assign n__read__h9626 =
	     current_spec_bits_ehr_dummy2_1$Q_OUT ?
	       IF_current_spec_bits_ehr_lat_0_whas_THEN_IF_cu_ETC___d8 :
	       12'd0 ;
  assign upd__h1000 = n__read__h9626 & specUpdate_correctSpeculation_mask ;
  assign upd__h1027 =
	     EN_claimSpecTag ?
	       MUX_current_spec_bits_ehr_lat_0$wset_1__VAL_1 :
	       MUX_current_spec_bits_ehr_lat_0$wset_1__VAL_2 ;
  assign valid_spec_tag__h2507 =
	     w__h2551[0] ?
	       (w__h2551[1] ?
		  (w__h2551[2] ?
		     (w__h2551[3] ?
			(w__h2551[4] ?
			   (w__h2551[5] ?
			      (w__h2551[6] ?
				 (w__h2551[7] ?
				    (w__h2551[8] ?
				       (w__h2551[9] ?
					  (w__h2551[10] ? 4'd11 : 4'd10) :
					  4'd9) :
				       4'd8) :
				    4'd7) :
				 4'd6) :
			      4'd5) :
			   4'd4) :
			4'd3) :
		     4'd2) :
		  4'd1) :
	       4'd0 ;
  assign w__h2551 =
	     (current_spec_bits_ehr_dummy2_0$Q_OUT &&
	      current_spec_bits_ehr_dummy2_1$Q_OUT) ?
	       current_spec_bits_ehr_rl :
	       12'd0 ;
  assign x__h3115 = 12'd1 << valid_spec_tag__h2507 ;
  assign x__h3496 = dependent_checkpoints_0 | x__h3115 ;
  assign x__h4015 = dependent_checkpoints_1 | x__h3115 ;
  assign x__h4534 = dependent_checkpoints_2 | x__h3115 ;
  assign x__h5053 = dependent_checkpoints_3 | x__h3115 ;
  assign x__h5572 = dependent_checkpoints_4 | x__h3115 ;
  assign x__h6091 = dependent_checkpoints_5 | x__h3115 ;
  assign x__h6610 = dependent_checkpoints_6 | x__h3115 ;
  assign x__h7129 = dependent_checkpoints_7 | x__h3115 ;
  assign x__h7648 = dependent_checkpoints_8 | x__h3115 ;
  assign x__h8167 = dependent_checkpoints_9 | x__h3115 ;
  assign x__h8686 = dependent_checkpoints_10 | x__h3115 ;
  assign x__h9205 = dependent_checkpoints_11 | x__h3115 ;
  assign x__h9465 = w__h2551 & y__h9500 ;
  assign y__h9500 = ~x__h9501 ;
  always@(specUpdate_incorrectSpeculation_kill_tag or
	  dependent_checkpoints_0 or
	  dependent_checkpoints_1 or
	  dependent_checkpoints_2 or
	  dependent_checkpoints_3 or
	  dependent_checkpoints_4 or
	  dependent_checkpoints_5 or
	  dependent_checkpoints_6 or
	  dependent_checkpoints_7 or
	  dependent_checkpoints_8 or
	  dependent_checkpoints_9 or
	  dependent_checkpoints_10 or dependent_checkpoints_11)
  begin
    case (specUpdate_incorrectSpeculation_kill_tag)
      4'd0: x__h9501 = dependent_checkpoints_0;
      4'd1: x__h9501 = dependent_checkpoints_1;
      4'd2: x__h9501 = dependent_checkpoints_2;
      4'd3: x__h9501 = dependent_checkpoints_3;
      4'd4: x__h9501 = dependent_checkpoints_4;
      4'd5: x__h9501 = dependent_checkpoints_5;
      4'd6: x__h9501 = dependent_checkpoints_6;
      4'd7: x__h9501 = dependent_checkpoints_7;
      4'd8: x__h9501 = dependent_checkpoints_8;
      4'd9: x__h9501 = dependent_checkpoints_9;
      4'd10: x__h9501 = dependent_checkpoints_10;
      4'd11: x__h9501 = dependent_checkpoints_11;
      default: x__h9501 = 12'b101010101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        current_spec_bits_ehr_rl <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_0 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_1 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_10 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_11 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_2 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_3 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_4 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_5 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_6 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_7 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_8 <= `BSV_ASSIGNMENT_DELAY 12'd0;
	dependent_checkpoints_9 <= `BSV_ASSIGNMENT_DELAY 12'd0;
      end
    else
      begin
        if (current_spec_bits_ehr_rl$EN)
	  current_spec_bits_ehr_rl <= `BSV_ASSIGNMENT_DELAY
	      current_spec_bits_ehr_rl$D_IN;
	if (dependent_checkpoints_0$EN)
	  dependent_checkpoints_0 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_0$D_IN;
	if (dependent_checkpoints_1$EN)
	  dependent_checkpoints_1 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_1$D_IN;
	if (dependent_checkpoints_10$EN)
	  dependent_checkpoints_10 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_10$D_IN;
	if (dependent_checkpoints_11$EN)
	  dependent_checkpoints_11 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_11$D_IN;
	if (dependent_checkpoints_2$EN)
	  dependent_checkpoints_2 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_2$D_IN;
	if (dependent_checkpoints_3$EN)
	  dependent_checkpoints_3 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_3$D_IN;
	if (dependent_checkpoints_4$EN)
	  dependent_checkpoints_4 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_4$D_IN;
	if (dependent_checkpoints_5$EN)
	  dependent_checkpoints_5 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_5$D_IN;
	if (dependent_checkpoints_6$EN)
	  dependent_checkpoints_6 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_6$D_IN;
	if (dependent_checkpoints_7$EN)
	  dependent_checkpoints_7 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_7$D_IN;
	if (dependent_checkpoints_8$EN)
	  dependent_checkpoints_8 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_8$D_IN;
	if (dependent_checkpoints_9$EN)
	  dependent_checkpoints_9 <= `BSV_ASSIGNMENT_DELAY
	      dependent_checkpoints_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    current_spec_bits_ehr_rl = 12'hAAA;
    dependent_checkpoints_0 = 12'hAAA;
    dependent_checkpoints_1 = 12'hAAA;
    dependent_checkpoints_10 = 12'hAAA;
    dependent_checkpoints_11 = 12'hAAA;
    dependent_checkpoints_2 = 12'hAAA;
    dependent_checkpoints_3 = 12'hAAA;
    dependent_checkpoints_4 = 12'hAAA;
    dependent_checkpoints_5 = 12'hAAA;
    dependent_checkpoints_6 = 12'hAAA;
    dependent_checkpoints_7 = 12'hAAA;
    dependent_checkpoints_8 = 12'hAAA;
    dependent_checkpoints_9 = 12'hAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (w__h2551[0] && w__h2551[1] && w__h2551[2] && w__h2551[3] &&
	  w__h2551[4] &&
	  w__h2551[5] &&
	  w__h2551[6] &&
	  w__h2551[7] &&
	  w__h2551[8] &&
	  w__h2551[9] &&
	  w__h2551[10] &&
	  w__h2551[11])
	$fdisplay(32'h80000001, "SpecTag manager locked");
  end
  // synopsys translate_on
endmodule  // mkSpecTagManager

