//
// Generated by Bluespec Compiler (build 0fccbb13)
//
// On Tue Aug 31 13:03:04 EDT 2021
//
//
// Ports:
// Name                         I/O  size props
// checkForException              O     5
// checkForException_dInst        I    72
// checkForException_regs         I    27
// checkForException_csrState     I    15
//
// Combinational paths from inputs to outputs:
//   (checkForException_dInst,
//    checkForException_regs,
//    checkForException_csrState) -> checkForException
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_checkForException(checkForException_dInst,
				checkForException_regs,
				checkForException_csrState,
				checkForException);
  // value method checkForException
  input  [71 : 0] checkForException_dInst;
  input  [26 : 0] checkForException_regs;
  input  [14 : 0] checkForException_csrState;
  output [4 : 0] checkForException;

  // signals for module outputs
  wire [4 : 0] checkForException;

  // remaining internal signals
  reg [3 : 0] CASE_checkForException_csrState_BITS_10_TO_9_0_ETC__q2,
	      CASE_checkForException_dInst_BITS_71_TO_67_17__ETC__q3;
  reg IF_checkForException_dInst_BITS_71_TO_67_EQ_20_ETC___d80;
  wire [31 : 0] imm__h133;
  wire [11 : 0] checkForException_dInst_BITS_44_TO_33__q1;
  wire [4 : 0] rs1__h132;
  wire [2 : 0] IF_IF_checkForException_dInst_BITS_66_TO_64_8__ETC___d60;
  wire checkForException_dInst_BITS_66_TO_64_8_EQ_0_9_ETC___d52;

  // value method checkForException
  assign checkForException =
	     { checkForException_dInst[71:67] == 5'd17 ||
	       checkForException_dInst[71:67] == 5'd18 ||
	       IF_checkForException_dInst_BITS_71_TO_67_EQ_20_ETC___d80,
	       CASE_checkForException_dInst_BITS_71_TO_67_17__ETC__q3 } ;

  // remaining internal signals
  assign IF_IF_checkForException_dInst_BITS_66_TO_64_8__ETC___d60 =
	     (checkForException_dInst[49:47] == 3'd7) ?
	       checkForException_csrState[14:12] :
	       checkForException_dInst[49:47] ;
  assign checkForException_dInst_BITS_44_TO_33__q1 =
	     checkForException_dInst[44:33] ;
  assign checkForException_dInst_BITS_66_TO_64_8_EQ_0_9_ETC___d52 =
	     (checkForException_dInst[66:64] == 3'd0 &&
	      checkForException_dInst[50:46] == 5'd15 ||
	      rs1__h132 != 5'd0 ||
	      imm__h133 != 32'd0) &&
	     checkForException_dInst_BITS_44_TO_33__q1[11:10] == 2'b11 ||
	     checkForException_csrState[10:9] <
	     checkForException_dInst_BITS_44_TO_33__q1[9:8] ||
	     checkForException_dInst[44:33] == 12'd2303 ||
	     checkForException_csrState[10:9] == 2'd1 &&
	     checkForException_csrState[8] &&
	     checkForException_dInst[44:33] == 12'd384 ;
  assign imm__h133 =
	     checkForException_dInst[32] ?
	       checkForException_dInst[31:0] :
	       32'd0 ;
  assign rs1__h132 =
	     (checkForException_regs[19] && !checkForException_regs[18]) ?
	       checkForException_regs[17:13] :
	       5'd0 ;
  always@(checkForException_dInst or
	  IF_IF_checkForException_dInst_BITS_66_TO_64_8__ETC___d60 or
	  checkForException_dInst_BITS_66_TO_64_8_EQ_0_9_ETC___d52 or
	  checkForException_csrState)
  begin
    case (checkForException_dInst[71:67])
      5'd13:
	  IF_checkForException_dInst_BITS_71_TO_67_EQ_20_ETC___d80 =
	      checkForException_dInst_BITS_66_TO_64_8_EQ_0_9_ETC___d52;
      5'd16:
	  IF_checkForException_dInst_BITS_71_TO_67_EQ_20_ETC___d80 =
	      checkForException_csrState[10:9] == 2'd1 &&
	      checkForException_csrState[8];
      5'd19:
	  IF_checkForException_dInst_BITS_71_TO_67_EQ_20_ETC___d80 =
	      checkForException_csrState[10:9] == 2'd0 ||
	      checkForException_csrState[10:9] == 2'd1 &&
	      checkForException_csrState[6];
      5'd20:
	  IF_checkForException_dInst_BITS_71_TO_67_EQ_20_ETC___d80 =
	      checkForException_csrState[10:9] != 2'd3;
      default: IF_checkForException_dInst_BITS_71_TO_67_EQ_20_ETC___d80 =
		   checkForException_dInst[71:67] == 5'd12 &&
		   (checkForException_dInst[66:64] != 3'd4 ||
		    IF_IF_checkForException_dInst_BITS_66_TO_64_8__ETC___d60 !=
		    3'd0 &&
		    IF_IF_checkForException_dInst_BITS_66_TO_64_8__ETC___d60 !=
		    3'd1 &&
		    IF_IF_checkForException_dInst_BITS_66_TO_64_8__ETC___d60 !=
		    3'd2 &&
		    IF_IF_checkForException_dInst_BITS_66_TO_64_8__ETC___d60 !=
		    3'd3 &&
		    IF_IF_checkForException_dInst_BITS_66_TO_64_8__ETC___d60 !=
		    3'd4);
    endcase
  end
  always@(checkForException_csrState)
  begin
    case (checkForException_csrState[10:9])
      2'd0: CASE_checkForException_csrState_BITS_10_TO_9_0_ETC__q2 = 4'd8;
      2'd1: CASE_checkForException_csrState_BITS_10_TO_9_0_ETC__q2 = 4'd9;
      2'd2: CASE_checkForException_csrState_BITS_10_TO_9_0_ETC__q2 = 4'd2;
      2'd3: CASE_checkForException_csrState_BITS_10_TO_9_0_ETC__q2 = 4'd11;
    endcase
  end
  always@(checkForException_dInst or
	  CASE_checkForException_csrState_BITS_10_TO_9_0_ETC__q2)
  begin
    case (checkForException_dInst[71:67])
      5'd17:
	  CASE_checkForException_dInst_BITS_71_TO_67_17__ETC__q3 =
	      CASE_checkForException_csrState_BITS_10_TO_9_0_ETC__q2;
      5'd18: CASE_checkForException_dInst_BITS_71_TO_67_17__ETC__q3 = 4'd3;
      default: CASE_checkForException_dInst_BITS_71_TO_67_17__ETC__q3 = 4'd2;
    endcase
  end
endmodule  // module_checkForException

