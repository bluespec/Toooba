//
// Generated by Bluespec Compiler (build 0fccbb13)
//
// On Tue Aug 31 13:06:25 EDT 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_write_enq                  O     1 const
// read_deq                       O   354
// RDY_read_deq                   O     1 const
// RDY_setLSQAtCommitNotified     O     1 const
// RDY_setExecuted_deqLSQ         O     1 const
// RDY_setExecuted_doFinishAlu_0_set  O     1 const
// RDY_setExecuted_doFinishAlu_1_set  O     1 const
// RDY_setExecuted_doFinishFpuMulDiv_0_set  O     1 const
// RDY_setExecuted_doFinishMem    O     1 const
// getOrigPC                      O    64 reg
// RDY_getOrigPC                  O     1 const
// getOrigPredPC                  O    64
// RDY_getOrigPredPC              O     1 const
// getOrig_Inst                   O    32 reg
// RDY_getOrig_Inst               O     1 const
// dependsOn_wrongSpec            O     1
// RDY_dependsOn_wrongSpec        O     1 const
// RDY_correctSpeculation         O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// write_enq_x                    I   354
// setExecuted_deqLSQ_cause       I     5
// setExecuted_deqLSQ_ld_killed   I     3
// setExecuted_doFinishAlu_0_set_dst_data  I    64
// setExecuted_doFinishAlu_0_set_csrData  I    65
// setExecuted_doFinishAlu_0_set_cf  I   130
// setExecuted_doFinishAlu_1_set_dst_data  I    64
// setExecuted_doFinishAlu_1_set_csrData  I    65
// setExecuted_doFinishAlu_1_set_cf  I   130
// setExecuted_doFinishFpuMulDiv_0_set_dst_data  I    64
// setExecuted_doFinishFpuMulDiv_0_set_fflags  I     5
// setExecuted_doFinishMem_vaddr  I    64
// setExecuted_doFinishMem_store_data  I    64 unused
// setExecuted_doFinishMem_store_data_BE  I     8 unused
// setExecuted_doFinishMem_access_at_commit  I     1
// setExecuted_doFinishMem_non_mmio_st_done  I     1
// dependsOn_wrongSpec_tag        I     4
// correctSpeculation_mask        I    12
// EN_write_enq                   I     1
// EN_setLSQAtCommitNotified      I     1
// EN_setExecuted_deqLSQ          I     1
// EN_setExecuted_doFinishAlu_0_set  I     1
// EN_setExecuted_doFinishAlu_1_set  I     1
// EN_setExecuted_doFinishFpuMulDiv_0_set  I     1
// EN_setExecuted_doFinishMem     I     1
// EN_correctSpeculation          I     1
//
// Combinational paths from inputs to outputs:
//   dependsOn_wrongSpec_tag -> dependsOn_wrongSpec
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRobRowSynth(CLK,
		     RST_N,

		     write_enq_x,
		     EN_write_enq,
		     RDY_write_enq,

		     read_deq,
		     RDY_read_deq,

		     EN_setLSQAtCommitNotified,
		     RDY_setLSQAtCommitNotified,

		     setExecuted_deqLSQ_cause,
		     setExecuted_deqLSQ_ld_killed,
		     EN_setExecuted_deqLSQ,
		     RDY_setExecuted_deqLSQ,

		     setExecuted_doFinishAlu_0_set_dst_data,
		     setExecuted_doFinishAlu_0_set_csrData,
		     setExecuted_doFinishAlu_0_set_cf,
		     EN_setExecuted_doFinishAlu_0_set,
		     RDY_setExecuted_doFinishAlu_0_set,

		     setExecuted_doFinishAlu_1_set_dst_data,
		     setExecuted_doFinishAlu_1_set_csrData,
		     setExecuted_doFinishAlu_1_set_cf,
		     EN_setExecuted_doFinishAlu_1_set,
		     RDY_setExecuted_doFinishAlu_1_set,

		     setExecuted_doFinishFpuMulDiv_0_set_dst_data,
		     setExecuted_doFinishFpuMulDiv_0_set_fflags,
		     EN_setExecuted_doFinishFpuMulDiv_0_set,
		     RDY_setExecuted_doFinishFpuMulDiv_0_set,

		     setExecuted_doFinishMem_vaddr,
		     setExecuted_doFinishMem_store_data,
		     setExecuted_doFinishMem_store_data_BE,
		     setExecuted_doFinishMem_access_at_commit,
		     setExecuted_doFinishMem_non_mmio_st_done,
		     EN_setExecuted_doFinishMem,
		     RDY_setExecuted_doFinishMem,

		     getOrigPC,
		     RDY_getOrigPC,

		     getOrigPredPC,
		     RDY_getOrigPredPC,

		     getOrig_Inst,
		     RDY_getOrig_Inst,

		     dependsOn_wrongSpec_tag,
		     dependsOn_wrongSpec,
		     RDY_dependsOn_wrongSpec,

		     correctSpeculation_mask,
		     EN_correctSpeculation,
		     RDY_correctSpeculation);
  input  CLK;
  input  RST_N;

  // action method write_enq
  input  [353 : 0] write_enq_x;
  input  EN_write_enq;
  output RDY_write_enq;

  // value method read_deq
  output [353 : 0] read_deq;
  output RDY_read_deq;

  // action method setLSQAtCommitNotified
  input  EN_setLSQAtCommitNotified;
  output RDY_setLSQAtCommitNotified;

  // action method setExecuted_deqLSQ
  input  [4 : 0] setExecuted_deqLSQ_cause;
  input  [2 : 0] setExecuted_deqLSQ_ld_killed;
  input  EN_setExecuted_deqLSQ;
  output RDY_setExecuted_deqLSQ;

  // action method setExecuted_doFinishAlu_0_set
  input  [63 : 0] setExecuted_doFinishAlu_0_set_dst_data;
  input  [64 : 0] setExecuted_doFinishAlu_0_set_csrData;
  input  [129 : 0] setExecuted_doFinishAlu_0_set_cf;
  input  EN_setExecuted_doFinishAlu_0_set;
  output RDY_setExecuted_doFinishAlu_0_set;

  // action method setExecuted_doFinishAlu_1_set
  input  [63 : 0] setExecuted_doFinishAlu_1_set_dst_data;
  input  [64 : 0] setExecuted_doFinishAlu_1_set_csrData;
  input  [129 : 0] setExecuted_doFinishAlu_1_set_cf;
  input  EN_setExecuted_doFinishAlu_1_set;
  output RDY_setExecuted_doFinishAlu_1_set;

  // action method setExecuted_doFinishFpuMulDiv_0_set
  input  [63 : 0] setExecuted_doFinishFpuMulDiv_0_set_dst_data;
  input  [4 : 0] setExecuted_doFinishFpuMulDiv_0_set_fflags;
  input  EN_setExecuted_doFinishFpuMulDiv_0_set;
  output RDY_setExecuted_doFinishFpuMulDiv_0_set;

  // action method setExecuted_doFinishMem
  input  [63 : 0] setExecuted_doFinishMem_vaddr;
  input  [63 : 0] setExecuted_doFinishMem_store_data;
  input  [7 : 0] setExecuted_doFinishMem_store_data_BE;
  input  setExecuted_doFinishMem_access_at_commit;
  input  setExecuted_doFinishMem_non_mmio_st_done;
  input  EN_setExecuted_doFinishMem;
  output RDY_setExecuted_doFinishMem;

  // value method getOrigPC
  output [63 : 0] getOrigPC;
  output RDY_getOrigPC;

  // value method getOrigPredPC
  output [63 : 0] getOrigPredPC;
  output RDY_getOrigPredPC;

  // value method getOrig_Inst
  output [31 : 0] getOrig_Inst;
  output RDY_getOrig_Inst;

  // value method dependsOn_wrongSpec
  input  [3 : 0] dependsOn_wrongSpec_tag;
  output dependsOn_wrongSpec;
  output RDY_dependsOn_wrongSpec;

  // action method correctSpeculation
  input  [11 : 0] correctSpeculation_mask;
  input  EN_correctSpeculation;
  output RDY_correctSpeculation;

  // signals for module outputs
  wire [353 : 0] read_deq;
  wire [63 : 0] getOrigPC, getOrigPredPC;
  wire [31 : 0] getOrig_Inst;
  wire RDY_correctSpeculation,
       RDY_dependsOn_wrongSpec,
       RDY_getOrigPC,
       RDY_getOrigPredPC,
       RDY_getOrig_Inst,
       RDY_read_deq,
       RDY_setExecuted_deqLSQ,
       RDY_setExecuted_doFinishAlu_0_set,
       RDY_setExecuted_doFinishAlu_1_set,
       RDY_setExecuted_doFinishFpuMulDiv_0_set,
       RDY_setExecuted_doFinishMem,
       RDY_setLSQAtCommitNotified,
       RDY_write_enq,
       dependsOn_wrongSpec;

  // inlined wires
  wire [65 : 0] m_ppc_vaddr_csrData_lat_0$wget,
		m_ppc_vaddr_csrData_lat_1$wget,
		m_ppc_vaddr_csrData_lat_2$wget;
  wire [5 : 0] m_trap_lat_0$wget, m_trap_lat_2$wget;
  wire m_rob_inst_state_lat_4$whas, m_trap_lat_0$whas;

  // register m_claimed_phy_reg
  reg m_claimed_phy_reg;
  wire m_claimed_phy_reg$D_IN, m_claimed_phy_reg$EN;

  // register m_csr
  reg [12 : 0] m_csr;
  wire [12 : 0] m_csr$D_IN;
  wire m_csr$EN;

  // register m_epochIncremented
  reg m_epochIncremented;
  wire m_epochIncremented$D_IN, m_epochIncremented$EN;

  // register m_fflags_rl
  reg [4 : 0] m_fflags_rl;
  wire [4 : 0] m_fflags_rl$D_IN;
  wire m_fflags_rl$EN;

  // register m_iType
  reg [4 : 0] m_iType;
  wire [4 : 0] m_iType$D_IN;
  wire m_iType$EN;

  // register m_ldKilled_rl
  reg [2 : 0] m_ldKilled_rl;
  wire [2 : 0] m_ldKilled_rl$D_IN;
  wire m_ldKilled_rl$EN;

  // register m_lsqAtCommitNotified_rl
  reg m_lsqAtCommitNotified_rl;
  wire m_lsqAtCommitNotified_rl$D_IN, m_lsqAtCommitNotified_rl$EN;

  // register m_lsqTag
  reg [5 : 0] m_lsqTag;
  wire [5 : 0] m_lsqTag$D_IN;
  wire m_lsqTag$EN;

  // register m_memAccessAtCommit_rl
  reg m_memAccessAtCommit_rl;
  wire m_memAccessAtCommit_rl$D_IN, m_memAccessAtCommit_rl$EN;

  // register m_nonMMIOStDone_rl
  reg m_nonMMIOStDone_rl;
  wire m_nonMMIOStDone_rl$D_IN, m_nonMMIOStDone_rl$EN;

  // register m_orig_inst
  reg [31 : 0] m_orig_inst;
  wire [31 : 0] m_orig_inst$D_IN;
  wire m_orig_inst$EN;

  // register m_pc
  reg [63 : 0] m_pc;
  wire [63 : 0] m_pc$D_IN;
  wire m_pc$EN;

  // register m_ppc_vaddr_csrData_rl
  reg [65 : 0] m_ppc_vaddr_csrData_rl;
  wire [65 : 0] m_ppc_vaddr_csrData_rl$D_IN;
  wire m_ppc_vaddr_csrData_rl$EN;

  // register m_rg_dst_data
  reg [63 : 0] m_rg_dst_data;
  reg [63 : 0] m_rg_dst_data$D_IN;
  wire m_rg_dst_data$EN;

  // register m_rg_dst_reg
  reg [6 : 0] m_rg_dst_reg;
  wire [6 : 0] m_rg_dst_reg$D_IN;
  wire m_rg_dst_reg$EN;

  // register m_rob_inst_state_rl
  reg m_rob_inst_state_rl;
  wire m_rob_inst_state_rl$D_IN, m_rob_inst_state_rl$EN;

  // register m_spec_bits_rl
  reg [11 : 0] m_spec_bits_rl;
  wire [11 : 0] m_spec_bits_rl$D_IN;
  wire m_spec_bits_rl$EN;

  // register m_trap_rl
  reg [5 : 0] m_trap_rl;
  wire [5 : 0] m_trap_rl$D_IN;
  wire m_trap_rl$EN;

  // register m_tval_rl
  reg [63 : 0] m_tval_rl;
  wire [63 : 0] m_tval_rl$D_IN;
  wire m_tval_rl$EN;

  // register m_will_dirty_fpu_state
  reg m_will_dirty_fpu_state;
  wire m_will_dirty_fpu_state$D_IN, m_will_dirty_fpu_state$EN;

  // ports of submodule m_fflags_dummy2_0
  wire m_fflags_dummy2_0$D_IN, m_fflags_dummy2_0$EN, m_fflags_dummy2_0$Q_OUT;

  // ports of submodule m_fflags_dummy2_1
  wire m_fflags_dummy2_1$D_IN, m_fflags_dummy2_1$EN, m_fflags_dummy2_1$Q_OUT;

  // ports of submodule m_ldKilled_dummy2_0
  wire m_ldKilled_dummy2_0$D_IN,
       m_ldKilled_dummy2_0$EN,
       m_ldKilled_dummy2_0$Q_OUT;

  // ports of submodule m_ldKilled_dummy2_1
  wire m_ldKilled_dummy2_1$D_IN,
       m_ldKilled_dummy2_1$EN,
       m_ldKilled_dummy2_1$Q_OUT;

  // ports of submodule m_lsqAtCommitNotified_dummy2_0
  wire m_lsqAtCommitNotified_dummy2_0$D_IN,
       m_lsqAtCommitNotified_dummy2_0$EN,
       m_lsqAtCommitNotified_dummy2_0$Q_OUT;

  // ports of submodule m_lsqAtCommitNotified_dummy2_1
  wire m_lsqAtCommitNotified_dummy2_1$D_IN,
       m_lsqAtCommitNotified_dummy2_1$EN,
       m_lsqAtCommitNotified_dummy2_1$Q_OUT;

  // ports of submodule m_memAccessAtCommit_dummy2_0
  wire m_memAccessAtCommit_dummy2_0$D_IN,
       m_memAccessAtCommit_dummy2_0$EN,
       m_memAccessAtCommit_dummy2_0$Q_OUT;

  // ports of submodule m_memAccessAtCommit_dummy2_1
  wire m_memAccessAtCommit_dummy2_1$D_IN,
       m_memAccessAtCommit_dummy2_1$EN,
       m_memAccessAtCommit_dummy2_1$Q_OUT;

  // ports of submodule m_memAccessAtCommit_dummy2_2
  wire m_memAccessAtCommit_dummy2_2$D_IN,
       m_memAccessAtCommit_dummy2_2$EN,
       m_memAccessAtCommit_dummy2_2$Q_OUT;

  // ports of submodule m_nonMMIOStDone_dummy2_0
  wire m_nonMMIOStDone_dummy2_0$D_IN,
       m_nonMMIOStDone_dummy2_0$EN,
       m_nonMMIOStDone_dummy2_0$Q_OUT;

  // ports of submodule m_nonMMIOStDone_dummy2_1
  wire m_nonMMIOStDone_dummy2_1$D_IN,
       m_nonMMIOStDone_dummy2_1$EN,
       m_nonMMIOStDone_dummy2_1$Q_OUT;

  // ports of submodule m_ppc_vaddr_csrData_dummy2_0
  wire m_ppc_vaddr_csrData_dummy2_0$D_IN,
       m_ppc_vaddr_csrData_dummy2_0$EN,
       m_ppc_vaddr_csrData_dummy2_0$Q_OUT;

  // ports of submodule m_ppc_vaddr_csrData_dummy2_1
  wire m_ppc_vaddr_csrData_dummy2_1$D_IN,
       m_ppc_vaddr_csrData_dummy2_1$EN,
       m_ppc_vaddr_csrData_dummy2_1$Q_OUT;

  // ports of submodule m_ppc_vaddr_csrData_dummy2_2
  wire m_ppc_vaddr_csrData_dummy2_2$D_IN,
       m_ppc_vaddr_csrData_dummy2_2$EN,
       m_ppc_vaddr_csrData_dummy2_2$Q_OUT;

  // ports of submodule m_ppc_vaddr_csrData_dummy2_3
  wire m_ppc_vaddr_csrData_dummy2_3$D_IN,
       m_ppc_vaddr_csrData_dummy2_3$EN,
       m_ppc_vaddr_csrData_dummy2_3$Q_OUT;

  // ports of submodule m_rob_inst_state_dummy2_0
  wire m_rob_inst_state_dummy2_0$D_IN,
       m_rob_inst_state_dummy2_0$EN,
       m_rob_inst_state_dummy2_0$Q_OUT;

  // ports of submodule m_rob_inst_state_dummy2_1
  wire m_rob_inst_state_dummy2_1$D_IN,
       m_rob_inst_state_dummy2_1$EN,
       m_rob_inst_state_dummy2_1$Q_OUT;

  // ports of submodule m_rob_inst_state_dummy2_2
  wire m_rob_inst_state_dummy2_2$D_IN,
       m_rob_inst_state_dummy2_2$EN,
       m_rob_inst_state_dummy2_2$Q_OUT;

  // ports of submodule m_rob_inst_state_dummy2_3
  wire m_rob_inst_state_dummy2_3$D_IN,
       m_rob_inst_state_dummy2_3$EN,
       m_rob_inst_state_dummy2_3$Q_OUT;

  // ports of submodule m_rob_inst_state_dummy2_4
  wire m_rob_inst_state_dummy2_4$D_IN,
       m_rob_inst_state_dummy2_4$EN,
       m_rob_inst_state_dummy2_4$Q_OUT;

  // ports of submodule m_rob_inst_state_dummy2_5
  wire m_rob_inst_state_dummy2_5$D_IN,
       m_rob_inst_state_dummy2_5$EN,
       m_rob_inst_state_dummy2_5$Q_OUT;

  // ports of submodule m_spec_bits_dummy2_0
  wire m_spec_bits_dummy2_0$D_IN,
       m_spec_bits_dummy2_0$EN,
       m_spec_bits_dummy2_0$Q_OUT;

  // ports of submodule m_spec_bits_dummy2_1
  wire m_spec_bits_dummy2_1$D_IN,
       m_spec_bits_dummy2_1$EN,
       m_spec_bits_dummy2_1$Q_OUT;

  // ports of submodule m_spec_bits_dummy2_2
  wire m_spec_bits_dummy2_2$D_IN,
       m_spec_bits_dummy2_2$EN,
       m_spec_bits_dummy2_2$Q_OUT;

  // ports of submodule m_trap_dummy2_0
  wire m_trap_dummy2_0$D_IN, m_trap_dummy2_0$EN, m_trap_dummy2_0$Q_OUT;

  // ports of submodule m_trap_dummy2_1
  wire m_trap_dummy2_1$D_IN, m_trap_dummy2_1$EN, m_trap_dummy2_1$Q_OUT;

  // ports of submodule m_trap_dummy2_2
  wire m_trap_dummy2_2$D_IN, m_trap_dummy2_2$EN, m_trap_dummy2_2$Q_OUT;

  // ports of submodule m_tval_dummy2_0
  wire m_tval_dummy2_0$D_IN, m_tval_dummy2_0$EN, m_tval_dummy2_0$Q_OUT;

  // ports of submodule m_tval_dummy2_1
  wire m_tval_dummy2_1$D_IN, m_tval_dummy2_1$EN, m_tval_dummy2_1$Q_OUT;

  // ports of submodule m_tval_dummy2_2
  wire m_tval_dummy2_2$D_IN, m_tval_dummy2_2$EN, m_tval_dummy2_2$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_m_fflags_canon,
       CAN_FIRE_RL_m_ldKilled_canon,
       CAN_FIRE_RL_m_lsqAtCommitNotified_canon,
       CAN_FIRE_RL_m_memAccessAtCommit_canon,
       CAN_FIRE_RL_m_nonMMIOStDone_canon,
       CAN_FIRE_RL_m_ppc_vaddr_csrData_canon,
       CAN_FIRE_RL_m_rob_inst_state_canon,
       CAN_FIRE_RL_m_setPcWires,
       CAN_FIRE_RL_m_spec_bits_canon,
       CAN_FIRE_RL_m_trap_canon,
       CAN_FIRE_RL_m_tval_canon,
       CAN_FIRE_correctSpeculation,
       CAN_FIRE_setExecuted_deqLSQ,
       CAN_FIRE_setExecuted_doFinishAlu_0_set,
       CAN_FIRE_setExecuted_doFinishAlu_1_set,
       CAN_FIRE_setExecuted_doFinishFpuMulDiv_0_set,
       CAN_FIRE_setExecuted_doFinishMem,
       CAN_FIRE_setLSQAtCommitNotified,
       CAN_FIRE_write_enq,
       WILL_FIRE_RL_m_fflags_canon,
       WILL_FIRE_RL_m_ldKilled_canon,
       WILL_FIRE_RL_m_lsqAtCommitNotified_canon,
       WILL_FIRE_RL_m_memAccessAtCommit_canon,
       WILL_FIRE_RL_m_nonMMIOStDone_canon,
       WILL_FIRE_RL_m_ppc_vaddr_csrData_canon,
       WILL_FIRE_RL_m_rob_inst_state_canon,
       WILL_FIRE_RL_m_setPcWires,
       WILL_FIRE_RL_m_spec_bits_canon,
       WILL_FIRE_RL_m_trap_canon,
       WILL_FIRE_RL_m_tval_canon,
       WILL_FIRE_correctSpeculation,
       WILL_FIRE_setExecuted_deqLSQ,
       WILL_FIRE_setExecuted_doFinishAlu_0_set,
       WILL_FIRE_setExecuted_doFinishAlu_1_set,
       WILL_FIRE_setExecuted_doFinishFpuMulDiv_0_set,
       WILL_FIRE_setExecuted_doFinishMem,
       WILL_FIRE_setLSQAtCommitNotified,
       WILL_FIRE_write_enq;

  // remaining internal signals
  wire [161 : 0] IF_m_tval_dummy2_0_read__06_AND_m_tval_dummy2__ETC___d366;
  wire [65 : 0] write_enq_x_BITS_97_TO_32__q2;
  wire [63 : 0] IF_IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_m_ETC___d172,
		IF_m_ppc_vaddr_csrData_dummy2_0_read__46_AND_m_ETC___d261,
		IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_IF_m_ETC___d126,
		IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d128,
		IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d146,
		IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d169,
		x__h25463;
  wire [11 : 0] IF_m_spec_bits_lat_1_whas__36_THEN_IF_m_spec_b_ETC___d244,
		bs__h31502,
		sb__h31537,
		upd__h17458;
  wire [5 : 0] write_enq_x_BITS_167_TO_162__q1;
  wire [4 : 0] x_read_deq_fflags__h25061;
  wire [3 : 0] IF_IF_m_trap_lat_2_whas_THEN_NOT_m_trap_lat_2__ETC___d48;
  wire [1 : 0] IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_IF_m_ETC___d108,
	       IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d110;
  wire IF_m_memAccessAtCommit_lat_1_whas__11_THEN_m_m_ETC___d217,
       IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_m_pp_ETC___d112,
       IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_m_pp_ETC___d130,
       IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_m_pp_ETC___d114,
       IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_m_pp_ETC___d132,
       IF_m_rob_inst_state_lat_3_whas__87_THEN_m_rob__ETC___d199,
       NOT_m_csr_96_BIT_12_79_EQ_setExecuted_doFinish_ETC___d381,
       NOT_m_csr_96_BIT_12_79_EQ_setExecuted_doFinish_ETC___d389,
       NOT_m_ppc_vaddr_csrData_dummy2_0_read__46_47_O_ETC___d256,
       m_ppc_vaddr_csrData_dummy2_0_read__46_AND_m_pp_ETC___d260,
       m_rob_inst_state_dummy2_0_read__21_AND_m_rob_i_ETC___d332,
       m_trap_dummy2_0_read__98_AND_m_trap_dummy2_1_r_ETC___d303;

  // action method write_enq
  assign RDY_write_enq = 1'd1 ;
  assign CAN_FIRE_write_enq = 1'd1 ;
  assign WILL_FIRE_write_enq = EN_write_enq ;

  // value method read_deq
  assign read_deq =
	     { m_pc,
	       m_orig_inst,
	       m_iType,
	       m_rg_dst_reg,
	       m_rg_dst_data,
	       m_csr,
	       m_claimed_phy_reg,
	       m_trap_dummy2_0_read__98_AND_m_trap_dummy2_1_r_ETC___d303,
	       m_trap_rl[4:0],
	       IF_m_tval_dummy2_0_read__06_AND_m_tval_dummy2__ETC___d366 } ;
  assign RDY_read_deq = 1'd1 ;

  // action method setLSQAtCommitNotified
  assign RDY_setLSQAtCommitNotified = 1'd1 ;
  assign CAN_FIRE_setLSQAtCommitNotified = 1'd1 ;
  assign WILL_FIRE_setLSQAtCommitNotified = EN_setLSQAtCommitNotified ;

  // action method setExecuted_deqLSQ
  assign RDY_setExecuted_deqLSQ = 1'd1 ;
  assign CAN_FIRE_setExecuted_deqLSQ = 1'd1 ;
  assign WILL_FIRE_setExecuted_deqLSQ = EN_setExecuted_deqLSQ ;

  // action method setExecuted_doFinishAlu_0_set
  assign RDY_setExecuted_doFinishAlu_0_set = 1'd1 ;
  assign CAN_FIRE_setExecuted_doFinishAlu_0_set = 1'd1 ;
  assign WILL_FIRE_setExecuted_doFinishAlu_0_set =
	     EN_setExecuted_doFinishAlu_0_set ;

  // action method setExecuted_doFinishAlu_1_set
  assign RDY_setExecuted_doFinishAlu_1_set = 1'd1 ;
  assign CAN_FIRE_setExecuted_doFinishAlu_1_set = 1'd1 ;
  assign WILL_FIRE_setExecuted_doFinishAlu_1_set =
	     EN_setExecuted_doFinishAlu_1_set ;

  // action method setExecuted_doFinishFpuMulDiv_0_set
  assign RDY_setExecuted_doFinishFpuMulDiv_0_set = 1'd1 ;
  assign CAN_FIRE_setExecuted_doFinishFpuMulDiv_0_set = 1'd1 ;
  assign WILL_FIRE_setExecuted_doFinishFpuMulDiv_0_set =
	     EN_setExecuted_doFinishFpuMulDiv_0_set ;

  // action method setExecuted_doFinishMem
  assign RDY_setExecuted_doFinishMem = 1'd1 ;
  assign CAN_FIRE_setExecuted_doFinishMem = 1'd1 ;
  assign WILL_FIRE_setExecuted_doFinishMem = EN_setExecuted_doFinishMem ;

  // value method getOrigPC
  assign getOrigPC = m_pc ;
  assign RDY_getOrigPC = 1'd1 ;

  // value method getOrigPredPC
  assign getOrigPredPC =
	     (NOT_m_ppc_vaddr_csrData_dummy2_0_read__46_47_O_ETC___d256 ||
	      m_ppc_vaddr_csrData_rl[65:64] == 2'd0) ?
	       IF_m_ppc_vaddr_csrData_dummy2_0_read__46_AND_m_ETC___d261 :
	       64'd0 ;
  assign RDY_getOrigPredPC = 1'd1 ;

  // value method getOrig_Inst
  assign getOrig_Inst = m_orig_inst ;
  assign RDY_getOrig_Inst = 1'd1 ;

  // value method dependsOn_wrongSpec
  assign dependsOn_wrongSpec = bs__h31502[dependsOn_wrongSpec_tag] ;
  assign RDY_dependsOn_wrongSpec = 1'd1 ;

  // action method correctSpeculation
  assign RDY_correctSpeculation = 1'd1 ;
  assign CAN_FIRE_correctSpeculation = 1'd1 ;
  assign WILL_FIRE_correctSpeculation = EN_correctSpeculation ;

  // submodule m_fflags_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_fflags_dummy2_0(.CLK(CLK),
							    .D_IN(m_fflags_dummy2_0$D_IN),
							    .EN(m_fflags_dummy2_0$EN),
							    .Q_OUT(m_fflags_dummy2_0$Q_OUT));

  // submodule m_fflags_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_fflags_dummy2_1(.CLK(CLK),
							    .D_IN(m_fflags_dummy2_1$D_IN),
							    .EN(m_fflags_dummy2_1$EN),
							    .Q_OUT(m_fflags_dummy2_1$Q_OUT));

  // submodule m_ldKilled_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_ldKilled_dummy2_0(.CLK(CLK),
							      .D_IN(m_ldKilled_dummy2_0$D_IN),
							      .EN(m_ldKilled_dummy2_0$EN),
							      .Q_OUT(m_ldKilled_dummy2_0$Q_OUT));

  // submodule m_ldKilled_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_ldKilled_dummy2_1(.CLK(CLK),
							      .D_IN(m_ldKilled_dummy2_1$D_IN),
							      .EN(m_ldKilled_dummy2_1$EN),
							      .Q_OUT(m_ldKilled_dummy2_1$Q_OUT));

  // submodule m_lsqAtCommitNotified_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) m_lsqAtCommitNotified_dummy2_0(.CLK(CLK),
							  .D_IN(m_lsqAtCommitNotified_dummy2_0$D_IN),
							  .EN(m_lsqAtCommitNotified_dummy2_0$EN),
							  .Q_OUT(m_lsqAtCommitNotified_dummy2_0$Q_OUT));

  // submodule m_lsqAtCommitNotified_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) m_lsqAtCommitNotified_dummy2_1(.CLK(CLK),
							  .D_IN(m_lsqAtCommitNotified_dummy2_1$D_IN),
							  .EN(m_lsqAtCommitNotified_dummy2_1$EN),
							  .Q_OUT(m_lsqAtCommitNotified_dummy2_1$Q_OUT));

  // submodule m_memAccessAtCommit_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) m_memAccessAtCommit_dummy2_0(.CLK(CLK),
							.D_IN(m_memAccessAtCommit_dummy2_0$D_IN),
							.EN(m_memAccessAtCommit_dummy2_0$EN),
							.Q_OUT(m_memAccessAtCommit_dummy2_0$Q_OUT));

  // submodule m_memAccessAtCommit_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) m_memAccessAtCommit_dummy2_1(.CLK(CLK),
							.D_IN(m_memAccessAtCommit_dummy2_1$D_IN),
							.EN(m_memAccessAtCommit_dummy2_1$EN),
							.Q_OUT(m_memAccessAtCommit_dummy2_1$Q_OUT));

  // submodule m_memAccessAtCommit_dummy2_2
  RevertReg #(.width(32'd1),
	      .init(1'd1)) m_memAccessAtCommit_dummy2_2(.CLK(CLK),
							.D_IN(m_memAccessAtCommit_dummy2_2$D_IN),
							.EN(m_memAccessAtCommit_dummy2_2$EN),
							.Q_OUT(m_memAccessAtCommit_dummy2_2$Q_OUT));

  // submodule m_nonMMIOStDone_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_nonMMIOStDone_dummy2_0(.CLK(CLK),
								   .D_IN(m_nonMMIOStDone_dummy2_0$D_IN),
								   .EN(m_nonMMIOStDone_dummy2_0$EN),
								   .Q_OUT(m_nonMMIOStDone_dummy2_0$Q_OUT));

  // submodule m_nonMMIOStDone_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_nonMMIOStDone_dummy2_1(.CLK(CLK),
								   .D_IN(m_nonMMIOStDone_dummy2_1$D_IN),
								   .EN(m_nonMMIOStDone_dummy2_1$EN),
								   .Q_OUT(m_nonMMIOStDone_dummy2_1$Q_OUT));

  // submodule m_ppc_vaddr_csrData_dummy2_0
  RevertReg #(.width(32'd1),
	      .init(1'd1)) m_ppc_vaddr_csrData_dummy2_0(.CLK(CLK),
							.D_IN(m_ppc_vaddr_csrData_dummy2_0$D_IN),
							.EN(m_ppc_vaddr_csrData_dummy2_0$EN),
							.Q_OUT(m_ppc_vaddr_csrData_dummy2_0$Q_OUT));

  // submodule m_ppc_vaddr_csrData_dummy2_1
  RevertReg #(.width(32'd1),
	      .init(1'd1)) m_ppc_vaddr_csrData_dummy2_1(.CLK(CLK),
							.D_IN(m_ppc_vaddr_csrData_dummy2_1$D_IN),
							.EN(m_ppc_vaddr_csrData_dummy2_1$EN),
							.Q_OUT(m_ppc_vaddr_csrData_dummy2_1$Q_OUT));

  // submodule m_ppc_vaddr_csrData_dummy2_2
  RevertReg #(.width(32'd1),
	      .init(1'd1)) m_ppc_vaddr_csrData_dummy2_2(.CLK(CLK),
							.D_IN(m_ppc_vaddr_csrData_dummy2_2$D_IN),
							.EN(m_ppc_vaddr_csrData_dummy2_2$EN),
							.Q_OUT(m_ppc_vaddr_csrData_dummy2_2$Q_OUT));

  // submodule m_ppc_vaddr_csrData_dummy2_3
  RevertReg #(.width(32'd1),
	      .init(1'd1)) m_ppc_vaddr_csrData_dummy2_3(.CLK(CLK),
							.D_IN(m_ppc_vaddr_csrData_dummy2_3$D_IN),
							.EN(m_ppc_vaddr_csrData_dummy2_3$EN),
							.Q_OUT(m_ppc_vaddr_csrData_dummy2_3$Q_OUT));

  // submodule m_rob_inst_state_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_rob_inst_state_dummy2_0(.CLK(CLK),
								    .D_IN(m_rob_inst_state_dummy2_0$D_IN),
								    .EN(m_rob_inst_state_dummy2_0$EN),
								    .Q_OUT(m_rob_inst_state_dummy2_0$Q_OUT));

  // submodule m_rob_inst_state_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_rob_inst_state_dummy2_1(.CLK(CLK),
								    .D_IN(m_rob_inst_state_dummy2_1$D_IN),
								    .EN(m_rob_inst_state_dummy2_1$EN),
								    .Q_OUT(m_rob_inst_state_dummy2_1$Q_OUT));

  // submodule m_rob_inst_state_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_rob_inst_state_dummy2_2(.CLK(CLK),
								    .D_IN(m_rob_inst_state_dummy2_2$D_IN),
								    .EN(m_rob_inst_state_dummy2_2$EN),
								    .Q_OUT(m_rob_inst_state_dummy2_2$Q_OUT));

  // submodule m_rob_inst_state_dummy2_3
  RevertReg #(.width(32'd1), .init(1'd1)) m_rob_inst_state_dummy2_3(.CLK(CLK),
								    .D_IN(m_rob_inst_state_dummy2_3$D_IN),
								    .EN(m_rob_inst_state_dummy2_3$EN),
								    .Q_OUT(m_rob_inst_state_dummy2_3$Q_OUT));

  // submodule m_rob_inst_state_dummy2_4
  RevertReg #(.width(32'd1), .init(1'd1)) m_rob_inst_state_dummy2_4(.CLK(CLK),
								    .D_IN(m_rob_inst_state_dummy2_4$D_IN),
								    .EN(m_rob_inst_state_dummy2_4$EN),
								    .Q_OUT(m_rob_inst_state_dummy2_4$Q_OUT));

  // submodule m_rob_inst_state_dummy2_5
  RevertReg #(.width(32'd1), .init(1'd1)) m_rob_inst_state_dummy2_5(.CLK(CLK),
								    .D_IN(m_rob_inst_state_dummy2_5$D_IN),
								    .EN(m_rob_inst_state_dummy2_5$EN),
								    .Q_OUT(m_rob_inst_state_dummy2_5$Q_OUT));

  // submodule m_spec_bits_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_dummy2_0(.CLK(CLK),
							       .D_IN(m_spec_bits_dummy2_0$D_IN),
							       .EN(m_spec_bits_dummy2_0$EN),
							       .Q_OUT(m_spec_bits_dummy2_0$Q_OUT));

  // submodule m_spec_bits_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_dummy2_1(.CLK(CLK),
							       .D_IN(m_spec_bits_dummy2_1$D_IN),
							       .EN(m_spec_bits_dummy2_1$EN),
							       .Q_OUT(m_spec_bits_dummy2_1$Q_OUT));

  // submodule m_spec_bits_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_dummy2_2(.CLK(CLK),
							       .D_IN(m_spec_bits_dummy2_2$D_IN),
							       .EN(m_spec_bits_dummy2_2$EN),
							       .Q_OUT(m_spec_bits_dummy2_2$Q_OUT));

  // submodule m_trap_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_trap_dummy2_0(.CLK(CLK),
							  .D_IN(m_trap_dummy2_0$D_IN),
							  .EN(m_trap_dummy2_0$EN),
							  .Q_OUT(m_trap_dummy2_0$Q_OUT));

  // submodule m_trap_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_trap_dummy2_1(.CLK(CLK),
							  .D_IN(m_trap_dummy2_1$D_IN),
							  .EN(m_trap_dummy2_1$EN),
							  .Q_OUT(m_trap_dummy2_1$Q_OUT));

  // submodule m_trap_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_trap_dummy2_2(.CLK(CLK),
							  .D_IN(m_trap_dummy2_2$D_IN),
							  .EN(m_trap_dummy2_2$EN),
							  .Q_OUT(m_trap_dummy2_2$Q_OUT));

  // submodule m_tval_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_tval_dummy2_0(.CLK(CLK),
							  .D_IN(m_tval_dummy2_0$D_IN),
							  .EN(m_tval_dummy2_0$EN),
							  .Q_OUT(m_tval_dummy2_0$Q_OUT));

  // submodule m_tval_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_tval_dummy2_1(.CLK(CLK),
							  .D_IN(m_tval_dummy2_1$D_IN),
							  .EN(m_tval_dummy2_1$EN),
							  .Q_OUT(m_tval_dummy2_1$Q_OUT));

  // submodule m_tval_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_tval_dummy2_2(.CLK(CLK),
							  .D_IN(m_tval_dummy2_2$D_IN),
							  .EN(m_tval_dummy2_2$EN),
							  .Q_OUT(m_tval_dummy2_2$Q_OUT));

  // rule RL_m_setPcWires
  assign CAN_FIRE_RL_m_setPcWires = 1'd1 ;
  assign WILL_FIRE_RL_m_setPcWires = 1'd1 ;

  // rule RL_m_trap_canon
  assign CAN_FIRE_RL_m_trap_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_trap_canon = 1'd1 ;

  // rule RL_m_tval_canon
  assign CAN_FIRE_RL_m_tval_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_tval_canon = 1'd1 ;

  // rule RL_m_ppc_vaddr_csrData_canon
  assign CAN_FIRE_RL_m_ppc_vaddr_csrData_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_ppc_vaddr_csrData_canon = 1'd1 ;

  // rule RL_m_fflags_canon
  assign CAN_FIRE_RL_m_fflags_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_fflags_canon = 1'd1 ;

  // rule RL_m_rob_inst_state_canon
  assign CAN_FIRE_RL_m_rob_inst_state_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_rob_inst_state_canon = 1'd1 ;

  // rule RL_m_ldKilled_canon
  assign CAN_FIRE_RL_m_ldKilled_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_ldKilled_canon = 1'd1 ;

  // rule RL_m_memAccessAtCommit_canon
  assign CAN_FIRE_RL_m_memAccessAtCommit_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_memAccessAtCommit_canon = 1'd1 ;

  // rule RL_m_lsqAtCommitNotified_canon
  assign CAN_FIRE_RL_m_lsqAtCommitNotified_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_lsqAtCommitNotified_canon = 1'd1 ;

  // rule RL_m_nonMMIOStDone_canon
  assign CAN_FIRE_RL_m_nonMMIOStDone_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_nonMMIOStDone_canon = 1'd1 ;

  // rule RL_m_spec_bits_canon
  assign CAN_FIRE_RL_m_spec_bits_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_spec_bits_canon = 1'd1 ;

  // inlined wires
  assign m_trap_lat_0$wget = { 2'd2, setExecuted_deqLSQ_cause[3:0] } ;
  assign m_trap_lat_0$whas =
	     EN_setExecuted_deqLSQ && setExecuted_deqLSQ_cause[4] ;
  assign m_trap_lat_2$wget = write_enq_x[167:162] ;
  assign m_ppc_vaddr_csrData_lat_0$wget =
	     setExecuted_doFinishAlu_0_set_csrData[64] ?
	       { 2'd2, setExecuted_doFinishAlu_0_set_csrData[63:0] } :
	       { 2'd0, setExecuted_doFinishAlu_0_set_cf[65:2] } ;
  assign m_ppc_vaddr_csrData_lat_1$wget =
	     setExecuted_doFinishAlu_1_set_csrData[64] ?
	       { 2'd2, setExecuted_doFinishAlu_1_set_csrData[63:0] } :
	       { 2'd0, setExecuted_doFinishAlu_1_set_cf[65:2] } ;
  assign m_ppc_vaddr_csrData_lat_2$wget =
	     { 2'd1, setExecuted_doFinishMem_vaddr } ;
  assign m_rob_inst_state_lat_4$whas =
	     EN_setExecuted_doFinishMem &&
	     setExecuted_doFinishMem_non_mmio_st_done ;

  // register m_claimed_phy_reg
  assign m_claimed_phy_reg$D_IN = write_enq_x[168] ;
  assign m_claimed_phy_reg$EN = EN_write_enq ;

  // register m_csr
  assign m_csr$D_IN = write_enq_x[181:169] ;
  assign m_csr$EN = EN_write_enq ;

  // register m_epochIncremented
  assign m_epochIncremented$D_IN = write_enq_x[12] ;
  assign m_epochIncremented$EN = EN_write_enq ;

  // register m_fflags_rl
  assign m_fflags_rl$D_IN =
	     EN_write_enq ?
	       write_enq_x[31:27] :
	       (EN_setExecuted_doFinishFpuMulDiv_0_set ?
		  setExecuted_doFinishFpuMulDiv_0_set_fflags :
		  m_fflags_rl) ;
  assign m_fflags_rl$EN = 1'd1 ;

  // register m_iType
  assign m_iType$D_IN = write_enq_x[257:253] ;
  assign m_iType$EN = EN_write_enq ;

  // register m_ldKilled_rl
  assign m_ldKilled_rl$D_IN =
	     EN_write_enq ?
	       3'd2 :
	       (EN_setExecuted_deqLSQ ?
		  setExecuted_deqLSQ_ld_killed :
		  m_ldKilled_rl) ;
  assign m_ldKilled_rl$EN = 1'd1 ;

  // register m_lsqAtCommitNotified_rl
  assign m_lsqAtCommitNotified_rl$D_IN =
	     !EN_write_enq &&
	     (EN_setLSQAtCommitNotified || m_lsqAtCommitNotified_rl) ;
  assign m_lsqAtCommitNotified_rl$EN = 1'd1 ;

  // register m_lsqTag
  assign m_lsqTag$D_IN = write_enq_x[24:19] ;
  assign m_lsqTag$EN = EN_write_enq ;

  // register m_memAccessAtCommit_rl
  assign m_memAccessAtCommit_rl$D_IN =
	     IF_m_memAccessAtCommit_lat_1_whas__11_THEN_m_m_ETC___d217 ;
  assign m_memAccessAtCommit_rl$EN = 1'd1 ;

  // register m_nonMMIOStDone_rl
  assign m_nonMMIOStDone_rl$D_IN =
	     !EN_write_enq &&
	     (EN_setExecuted_doFinishMem ?
		setExecuted_doFinishMem_non_mmio_st_done :
		m_nonMMIOStDone_rl) ;
  assign m_nonMMIOStDone_rl$EN = 1'd1 ;

  // register m_orig_inst
  assign m_orig_inst$D_IN = write_enq_x[289:258] ;
  assign m_orig_inst$EN = EN_write_enq ;

  // register m_pc
  assign m_pc$D_IN = write_enq_x[353:290] ;
  assign m_pc$EN = EN_write_enq ;

  // register m_ppc_vaddr_csrData_rl
  assign m_ppc_vaddr_csrData_rl$D_IN =
	     { IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d110,
	       IF_IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_m_ETC___d172 } ;
  assign m_ppc_vaddr_csrData_rl$EN = 1'd1 ;

  // register m_rg_dst_data
  always@(EN_setExecuted_doFinishFpuMulDiv_0_set or
	  setExecuted_doFinishFpuMulDiv_0_set_dst_data or
	  EN_setExecuted_doFinishAlu_1_set or
	  setExecuted_doFinishAlu_1_set_dst_data or
	  EN_setExecuted_doFinishAlu_0_set or
	  setExecuted_doFinishAlu_0_set_dst_data)
  case (1'b1)
    EN_setExecuted_doFinishFpuMulDiv_0_set:
	m_rg_dst_data$D_IN = setExecuted_doFinishFpuMulDiv_0_set_dst_data;
    EN_setExecuted_doFinishAlu_1_set:
	m_rg_dst_data$D_IN = setExecuted_doFinishAlu_1_set_dst_data;
    EN_setExecuted_doFinishAlu_0_set:
	m_rg_dst_data$D_IN = setExecuted_doFinishAlu_0_set_dst_data;
    default: m_rg_dst_data$D_IN =
		 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign m_rg_dst_data$EN =
	     EN_setExecuted_doFinishAlu_0_set ||
	     EN_setExecuted_doFinishAlu_1_set ||
	     EN_setExecuted_doFinishFpuMulDiv_0_set ;

  // register m_rg_dst_reg
  assign m_rg_dst_reg$D_IN = write_enq_x[252:246] ;
  assign m_rg_dst_reg$EN = EN_write_enq ;

  // register m_rob_inst_state_rl
  assign m_rob_inst_state_rl$D_IN =
	     EN_write_enq ?
	       write_enq_x[25] :
	       m_rob_inst_state_lat_4$whas ||
	       IF_m_rob_inst_state_lat_3_whas__87_THEN_m_rob__ETC___d199 ;
  assign m_rob_inst_state_rl$EN = 1'd1 ;

  // register m_spec_bits_rl
  assign m_spec_bits_rl$D_IN =
	     EN_correctSpeculation ?
	       upd__h17458 :
	       IF_m_spec_bits_lat_1_whas__36_THEN_IF_m_spec_b_ETC___d244 ;
  assign m_spec_bits_rl$EN = 1'd1 ;

  // register m_trap_rl
  assign m_trap_rl$D_IN =
	     { EN_write_enq ?
		 m_trap_lat_2$wget[5] :
		 (m_trap_lat_0$whas ? m_trap_lat_0$wget[5] : m_trap_rl[5]),
	       EN_write_enq ?
		 m_trap_lat_2$wget[4] :
		 (m_trap_lat_0$whas ? m_trap_lat_0$wget[4] : m_trap_rl[4]),
	       IF_IF_m_trap_lat_2_whas_THEN_NOT_m_trap_lat_2__ETC___d48 } ;
  assign m_trap_rl$EN = 1'd1 ;

  // register m_tval_rl
  assign m_tval_rl$D_IN = EN_write_enq ? write_enq_x[161:98] : m_tval_rl ;
  assign m_tval_rl$EN = 1'd1 ;

  // register m_will_dirty_fpu_state
  assign m_will_dirty_fpu_state$D_IN = write_enq_x[26] ;
  assign m_will_dirty_fpu_state$EN = EN_write_enq ;

  // submodule m_fflags_dummy2_0
  assign m_fflags_dummy2_0$D_IN = 1'd1 ;
  assign m_fflags_dummy2_0$EN = EN_setExecuted_doFinishFpuMulDiv_0_set ;

  // submodule m_fflags_dummy2_1
  assign m_fflags_dummy2_1$D_IN = 1'd1 ;
  assign m_fflags_dummy2_1$EN = EN_write_enq ;

  // submodule m_ldKilled_dummy2_0
  assign m_ldKilled_dummy2_0$D_IN = 1'd1 ;
  assign m_ldKilled_dummy2_0$EN = EN_setExecuted_deqLSQ ;

  // submodule m_ldKilled_dummy2_1
  assign m_ldKilled_dummy2_1$D_IN = 1'd1 ;
  assign m_ldKilled_dummy2_1$EN = EN_write_enq ;

  // submodule m_lsqAtCommitNotified_dummy2_0
  assign m_lsqAtCommitNotified_dummy2_0$D_IN = 1'd1 ;
  assign m_lsqAtCommitNotified_dummy2_0$EN = EN_setLSQAtCommitNotified ;

  // submodule m_lsqAtCommitNotified_dummy2_1
  assign m_lsqAtCommitNotified_dummy2_1$D_IN = 1'd1 ;
  assign m_lsqAtCommitNotified_dummy2_1$EN = EN_write_enq ;

  // submodule m_memAccessAtCommit_dummy2_0
  assign m_memAccessAtCommit_dummy2_0$D_IN = 1'd1 ;
  assign m_memAccessAtCommit_dummy2_0$EN = EN_setExecuted_doFinishMem ;

  // submodule m_memAccessAtCommit_dummy2_1
  assign m_memAccessAtCommit_dummy2_1$D_IN = 1'd1 ;
  assign m_memAccessAtCommit_dummy2_1$EN = EN_write_enq ;

  // submodule m_memAccessAtCommit_dummy2_2
  assign m_memAccessAtCommit_dummy2_2$D_IN = 1'b0 ;
  assign m_memAccessAtCommit_dummy2_2$EN = 1'b0 ;

  // submodule m_nonMMIOStDone_dummy2_0
  assign m_nonMMIOStDone_dummy2_0$D_IN = 1'd1 ;
  assign m_nonMMIOStDone_dummy2_0$EN = EN_setExecuted_doFinishMem ;

  // submodule m_nonMMIOStDone_dummy2_1
  assign m_nonMMIOStDone_dummy2_1$D_IN = 1'd1 ;
  assign m_nonMMIOStDone_dummy2_1$EN = EN_write_enq ;

  // submodule m_ppc_vaddr_csrData_dummy2_0
  assign m_ppc_vaddr_csrData_dummy2_0$D_IN = 1'd1 ;
  assign m_ppc_vaddr_csrData_dummy2_0$EN = EN_setExecuted_doFinishAlu_0_set ;

  // submodule m_ppc_vaddr_csrData_dummy2_1
  assign m_ppc_vaddr_csrData_dummy2_1$D_IN = 1'd1 ;
  assign m_ppc_vaddr_csrData_dummy2_1$EN = EN_setExecuted_doFinishAlu_1_set ;

  // submodule m_ppc_vaddr_csrData_dummy2_2
  assign m_ppc_vaddr_csrData_dummy2_2$D_IN = 1'd1 ;
  assign m_ppc_vaddr_csrData_dummy2_2$EN = EN_setExecuted_doFinishMem ;

  // submodule m_ppc_vaddr_csrData_dummy2_3
  assign m_ppc_vaddr_csrData_dummy2_3$D_IN = 1'd1 ;
  assign m_ppc_vaddr_csrData_dummy2_3$EN = EN_write_enq ;

  // submodule m_rob_inst_state_dummy2_0
  assign m_rob_inst_state_dummy2_0$D_IN = 1'd1 ;
  assign m_rob_inst_state_dummy2_0$EN = EN_setExecuted_doFinishAlu_0_set ;

  // submodule m_rob_inst_state_dummy2_1
  assign m_rob_inst_state_dummy2_1$D_IN = 1'd1 ;
  assign m_rob_inst_state_dummy2_1$EN = EN_setExecuted_doFinishAlu_1_set ;

  // submodule m_rob_inst_state_dummy2_2
  assign m_rob_inst_state_dummy2_2$D_IN = 1'd1 ;
  assign m_rob_inst_state_dummy2_2$EN =
	     EN_setExecuted_doFinishFpuMulDiv_0_set ;

  // submodule m_rob_inst_state_dummy2_3
  assign m_rob_inst_state_dummy2_3$D_IN = 1'd1 ;
  assign m_rob_inst_state_dummy2_3$EN = EN_setExecuted_deqLSQ ;

  // submodule m_rob_inst_state_dummy2_4
  assign m_rob_inst_state_dummy2_4$D_IN = 1'd1 ;
  assign m_rob_inst_state_dummy2_4$EN = m_rob_inst_state_lat_4$whas ;

  // submodule m_rob_inst_state_dummy2_5
  assign m_rob_inst_state_dummy2_5$D_IN = 1'd1 ;
  assign m_rob_inst_state_dummy2_5$EN = EN_write_enq ;

  // submodule m_spec_bits_dummy2_0
  assign m_spec_bits_dummy2_0$D_IN = 1'b0 ;
  assign m_spec_bits_dummy2_0$EN = 1'b0 ;

  // submodule m_spec_bits_dummy2_1
  assign m_spec_bits_dummy2_1$D_IN = 1'd1 ;
  assign m_spec_bits_dummy2_1$EN = EN_write_enq ;

  // submodule m_spec_bits_dummy2_2
  assign m_spec_bits_dummy2_2$D_IN = 1'd1 ;
  assign m_spec_bits_dummy2_2$EN = EN_correctSpeculation ;

  // submodule m_trap_dummy2_0
  assign m_trap_dummy2_0$D_IN = 1'd1 ;
  assign m_trap_dummy2_0$EN = m_trap_lat_0$whas ;

  // submodule m_trap_dummy2_1
  assign m_trap_dummy2_1$D_IN = 1'b0 ;
  assign m_trap_dummy2_1$EN = 1'b0 ;

  // submodule m_trap_dummy2_2
  assign m_trap_dummy2_2$D_IN = 1'd1 ;
  assign m_trap_dummy2_2$EN = EN_write_enq ;

  // submodule m_tval_dummy2_0
  assign m_tval_dummy2_0$D_IN = 1'b0 ;
  assign m_tval_dummy2_0$EN = 1'b0 ;

  // submodule m_tval_dummy2_1
  assign m_tval_dummy2_1$D_IN = 1'b0 ;
  assign m_tval_dummy2_1$EN = 1'b0 ;

  // submodule m_tval_dummy2_2
  assign m_tval_dummy2_2$D_IN = 1'd1 ;
  assign m_tval_dummy2_2$EN = EN_write_enq ;

  // remaining internal signals
  assign IF_IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_m_ETC___d172 =
	     IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_m_pp_ETC___d114 ?
	       IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d128 :
	       (IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_m_pp_ETC___d132 ?
		  IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d146 :
		  IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d169) ;
  assign IF_IF_m_trap_lat_2_whas_THEN_NOT_m_trap_lat_2__ETC___d48 =
	     (EN_write_enq ?
		!write_enq_x_BITS_167_TO_162__q1[4] :
		(m_trap_lat_0$whas ? !m_trap_lat_0$wget[4] : !m_trap_rl[4])) ?
	       (EN_write_enq ?
		  write_enq_x_BITS_167_TO_162__q1[3:0] :
		  (m_trap_lat_0$whas ?
		     m_trap_lat_0$wget[3:0] :
		     m_trap_rl[3:0])) :
	       (EN_write_enq ?
		  write_enq_x_BITS_167_TO_162__q1[3:0] :
		  (m_trap_lat_0$whas ?
		     m_trap_lat_0$wget[3:0] :
		     m_trap_rl[3:0])) ;
  assign IF_m_memAccessAtCommit_lat_1_whas__11_THEN_m_m_ETC___d217 =
	     EN_write_enq ?
	       write_enq_x[257:253] == 5'd14 :
	       (EN_setExecuted_doFinishMem ?
		  setExecuted_doFinishMem_access_at_commit :
		  m_memAccessAtCommit_rl) ;
  assign IF_m_ppc_vaddr_csrData_dummy2_0_read__46_AND_m_ETC___d261 =
	     m_ppc_vaddr_csrData_dummy2_0_read__46_AND_m_pp_ETC___d260 ?
	       m_ppc_vaddr_csrData_rl[63:0] :
	       64'd0 ;
  assign IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_IF_m_ETC___d108 =
	     EN_setExecuted_doFinishAlu_1_set ?
	       m_ppc_vaddr_csrData_lat_1$wget[65:64] :
	       (EN_setExecuted_doFinishAlu_0_set ?
		  m_ppc_vaddr_csrData_lat_0$wget[65:64] :
		  m_ppc_vaddr_csrData_rl[65:64]) ;
  assign IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_IF_m_ETC___d126 =
	     EN_setExecuted_doFinishAlu_1_set ?
	       m_ppc_vaddr_csrData_lat_1$wget[63:0] :
	       (EN_setExecuted_doFinishAlu_0_set ?
		  m_ppc_vaddr_csrData_lat_0$wget[63:0] :
		  m_ppc_vaddr_csrData_rl[63:0]) ;
  assign IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_m_pp_ETC___d112 =
	     EN_setExecuted_doFinishAlu_1_set ?
	       m_ppc_vaddr_csrData_lat_1$wget[65:64] == 2'd0 :
	       (EN_setExecuted_doFinishAlu_0_set ?
		  m_ppc_vaddr_csrData_lat_0$wget[65:64] == 2'd0 :
		  m_ppc_vaddr_csrData_rl[65:64] == 2'd0) ;
  assign IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_m_pp_ETC___d130 =
	     EN_setExecuted_doFinishAlu_1_set ?
	       m_ppc_vaddr_csrData_lat_1$wget[65:64] == 2'd1 :
	       (EN_setExecuted_doFinishAlu_0_set ?
		  m_ppc_vaddr_csrData_lat_0$wget[65:64] == 2'd1 :
		  m_ppc_vaddr_csrData_rl[65:64] == 2'd1) ;
  assign IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d110 =
	     EN_write_enq ?
	       write_enq_x_BITS_97_TO_32__q2[65:64] :
	       (EN_setExecuted_doFinishMem ?
		  m_ppc_vaddr_csrData_lat_2$wget[65:64] :
		  IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_IF_m_ETC___d108) ;
  assign IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d128 =
	     EN_write_enq ?
	       write_enq_x_BITS_97_TO_32__q2[63:0] :
	       (EN_setExecuted_doFinishMem ?
		  m_ppc_vaddr_csrData_lat_2$wget[63:0] :
		  IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_IF_m_ETC___d126) ;
  assign IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d146 =
	     EN_write_enq ?
	       write_enq_x_BITS_97_TO_32__q2[63:0] :
	       (EN_setExecuted_doFinishMem ?
		  m_ppc_vaddr_csrData_lat_2$wget[63:0] :
		  IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_IF_m_ETC___d126) ;
  assign IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_IF_m_ETC___d169 =
	     EN_write_enq ?
	       write_enq_x_BITS_97_TO_32__q2[63:0] :
	       (EN_setExecuted_doFinishMem ?
		  m_ppc_vaddr_csrData_lat_2$wget[63:0] :
		  IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_IF_m_ETC___d126) ;
  assign IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_m_pp_ETC___d114 =
	     EN_write_enq ?
	       write_enq_x_BITS_97_TO_32__q2[65:64] == 2'd0 :
	       (EN_setExecuted_doFinishMem ?
		  m_ppc_vaddr_csrData_lat_2$wget[65:64] == 2'd0 :
		  IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_m_pp_ETC___d112) ;
  assign IF_m_ppc_vaddr_csrData_lat_3_whas__3_THEN_m_pp_ETC___d132 =
	     EN_write_enq ?
	       write_enq_x_BITS_97_TO_32__q2[65:64] == 2'd1 :
	       (EN_setExecuted_doFinishMem ?
		  m_ppc_vaddr_csrData_lat_2$wget[65:64] == 2'd1 :
		  IF_m_ppc_vaddr_csrData_lat_1_whas__1_THEN_m_pp_ETC___d130) ;
  assign IF_m_rob_inst_state_lat_3_whas__87_THEN_m_rob__ETC___d199 =
	     EN_setExecuted_deqLSQ ||
	     EN_setExecuted_doFinishFpuMulDiv_0_set ||
	     EN_setExecuted_doFinishAlu_1_set ||
	     EN_setExecuted_doFinishAlu_0_set ||
	     m_rob_inst_state_rl ;
  assign IF_m_spec_bits_lat_1_whas__36_THEN_IF_m_spec_b_ETC___d244 =
	     EN_write_enq ? write_enq_x[11:0] : m_spec_bits_rl ;
  assign IF_m_tval_dummy2_0_read__06_AND_m_tval_dummy2__ETC___d366 =
	     { x__h25463,
	       m_ppc_vaddr_csrData_dummy2_0_read__46_AND_m_pp_ETC___d260 ?
		 m_ppc_vaddr_csrData_rl[65:64] :
		 2'd0,
	       (NOT_m_ppc_vaddr_csrData_dummy2_0_read__46_47_O_ETC___d256 ||
		m_ppc_vaddr_csrData_rl[65:64] == 2'd0) ?
		 IF_m_ppc_vaddr_csrData_dummy2_0_read__46_AND_m_ETC___d261 :
		 m_ppc_vaddr_csrData_rl[63:0],
	       x_read_deq_fflags__h25061,
	       m_will_dirty_fpu_state,
	       m_rob_inst_state_dummy2_0_read__21_AND_m_rob_i_ETC___d332,
	       m_lsqTag,
	       m_ldKilled_dummy2_0$Q_OUT && m_ldKilled_dummy2_1$Q_OUT &&
	       m_ldKilled_rl[2],
	       m_ldKilled_rl[1:0],
	       m_memAccessAtCommit_dummy2_0$Q_OUT &&
	       m_memAccessAtCommit_dummy2_1$Q_OUT &&
	       m_memAccessAtCommit_dummy2_2$Q_OUT &&
	       m_memAccessAtCommit_rl,
	       m_lsqAtCommitNotified_dummy2_0$Q_OUT &&
	       m_lsqAtCommitNotified_dummy2_1$Q_OUT &&
	       m_lsqAtCommitNotified_rl,
	       m_nonMMIOStDone_dummy2_0$Q_OUT &&
	       m_nonMMIOStDone_dummy2_1$Q_OUT &&
	       m_nonMMIOStDone_rl,
	       m_epochIncremented,
	       bs__h31502 } ;
  assign NOT_m_csr_96_BIT_12_79_EQ_setExecuted_doFinish_ETC___d381 =
	     m_csr[12] != setExecuted_doFinishAlu_0_set_csrData[64] ;
  assign NOT_m_csr_96_BIT_12_79_EQ_setExecuted_doFinish_ETC___d389 =
	     m_csr[12] != setExecuted_doFinishAlu_1_set_csrData[64] ;
  assign NOT_m_ppc_vaddr_csrData_dummy2_0_read__46_47_O_ETC___d256 =
	     !m_ppc_vaddr_csrData_dummy2_0$Q_OUT ||
	     !m_ppc_vaddr_csrData_dummy2_1$Q_OUT ||
	     !m_ppc_vaddr_csrData_dummy2_2$Q_OUT ||
	     !m_ppc_vaddr_csrData_dummy2_3$Q_OUT ;
  assign bs__h31502 =
	     (m_spec_bits_dummy2_0$Q_OUT && m_spec_bits_dummy2_1$Q_OUT &&
	      m_spec_bits_dummy2_2$Q_OUT) ?
	       m_spec_bits_rl :
	       12'd0 ;
  assign m_ppc_vaddr_csrData_dummy2_0_read__46_AND_m_pp_ETC___d260 =
	     m_ppc_vaddr_csrData_dummy2_0$Q_OUT &&
	     m_ppc_vaddr_csrData_dummy2_1$Q_OUT &&
	     m_ppc_vaddr_csrData_dummy2_2$Q_OUT &&
	     m_ppc_vaddr_csrData_dummy2_3$Q_OUT ;
  assign m_rob_inst_state_dummy2_0_read__21_AND_m_rob_i_ETC___d332 =
	     m_rob_inst_state_dummy2_0$Q_OUT &&
	     m_rob_inst_state_dummy2_1$Q_OUT &&
	     m_rob_inst_state_dummy2_2$Q_OUT &&
	     m_rob_inst_state_dummy2_3$Q_OUT &&
	     m_rob_inst_state_dummy2_4$Q_OUT &&
	     m_rob_inst_state_dummy2_5$Q_OUT &&
	     m_rob_inst_state_rl ;
  assign m_trap_dummy2_0_read__98_AND_m_trap_dummy2_1_r_ETC___d303 =
	     m_trap_dummy2_0$Q_OUT && m_trap_dummy2_1$Q_OUT &&
	     m_trap_dummy2_2$Q_OUT &&
	     m_trap_rl[5] ;
  assign sb__h31537 =
	     m_spec_bits_dummy2_2$Q_OUT ?
	       IF_m_spec_bits_lat_1_whas__36_THEN_IF_m_spec_b_ETC___d244 :
	       12'd0 ;
  assign upd__h17458 = sb__h31537 & correctSpeculation_mask ;
  assign write_enq_x_BITS_167_TO_162__q1 = write_enq_x[167:162] ;
  assign write_enq_x_BITS_97_TO_32__q2 = write_enq_x[97:32] ;
  assign x__h25463 =
	     (m_tval_dummy2_0$Q_OUT && m_tval_dummy2_1$Q_OUT &&
	      m_tval_dummy2_2$Q_OUT) ?
	       m_tval_rl :
	       64'd0 ;
  assign x_read_deq_fflags__h25061 =
	     (m_fflags_dummy2_0$Q_OUT && m_fflags_dummy2_1$Q_OUT) ?
	       m_fflags_rl :
	       5'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        m_fflags_rl <= `BSV_ASSIGNMENT_DELAY 5'h0A;
	m_ldKilled_rl <= `BSV_ASSIGNMENT_DELAY 3'h2;
	m_lsqAtCommitNotified_rl <= `BSV_ASSIGNMENT_DELAY 1'h0;
	m_memAccessAtCommit_rl <= `BSV_ASSIGNMENT_DELAY 1'h0;
	m_nonMMIOStDone_rl <= `BSV_ASSIGNMENT_DELAY 1'h0;
	m_ppc_vaddr_csrData_rl <= `BSV_ASSIGNMENT_DELAY 66'h2AAAAAAAAAAAAAAAA;
	m_rob_inst_state_rl <= `BSV_ASSIGNMENT_DELAY 1'h0;
	m_spec_bits_rl <= `BSV_ASSIGNMENT_DELAY 12'hAAA;
	m_trap_rl <= `BSV_ASSIGNMENT_DELAY 6'h2A;
	m_tval_rl <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (m_fflags_rl$EN)
	  m_fflags_rl <= `BSV_ASSIGNMENT_DELAY m_fflags_rl$D_IN;
	if (m_ldKilled_rl$EN)
	  m_ldKilled_rl <= `BSV_ASSIGNMENT_DELAY m_ldKilled_rl$D_IN;
	if (m_lsqAtCommitNotified_rl$EN)
	  m_lsqAtCommitNotified_rl <= `BSV_ASSIGNMENT_DELAY
	      m_lsqAtCommitNotified_rl$D_IN;
	if (m_memAccessAtCommit_rl$EN)
	  m_memAccessAtCommit_rl <= `BSV_ASSIGNMENT_DELAY
	      m_memAccessAtCommit_rl$D_IN;
	if (m_nonMMIOStDone_rl$EN)
	  m_nonMMIOStDone_rl <= `BSV_ASSIGNMENT_DELAY m_nonMMIOStDone_rl$D_IN;
	if (m_ppc_vaddr_csrData_rl$EN)
	  m_ppc_vaddr_csrData_rl <= `BSV_ASSIGNMENT_DELAY
	      m_ppc_vaddr_csrData_rl$D_IN;
	if (m_rob_inst_state_rl$EN)
	  m_rob_inst_state_rl <= `BSV_ASSIGNMENT_DELAY
	      m_rob_inst_state_rl$D_IN;
	if (m_spec_bits_rl$EN)
	  m_spec_bits_rl <= `BSV_ASSIGNMENT_DELAY m_spec_bits_rl$D_IN;
	if (m_trap_rl$EN) m_trap_rl <= `BSV_ASSIGNMENT_DELAY m_trap_rl$D_IN;
	if (m_tval_rl$EN) m_tval_rl <= `BSV_ASSIGNMENT_DELAY m_tval_rl$D_IN;
      end
    if (m_claimed_phy_reg$EN)
      m_claimed_phy_reg <= `BSV_ASSIGNMENT_DELAY m_claimed_phy_reg$D_IN;
    if (m_csr$EN) m_csr <= `BSV_ASSIGNMENT_DELAY m_csr$D_IN;
    if (m_epochIncremented$EN)
      m_epochIncremented <= `BSV_ASSIGNMENT_DELAY m_epochIncremented$D_IN;
    if (m_iType$EN) m_iType <= `BSV_ASSIGNMENT_DELAY m_iType$D_IN;
    if (m_lsqTag$EN) m_lsqTag <= `BSV_ASSIGNMENT_DELAY m_lsqTag$D_IN;
    if (m_orig_inst$EN) m_orig_inst <= `BSV_ASSIGNMENT_DELAY m_orig_inst$D_IN;
    if (m_pc$EN) m_pc <= `BSV_ASSIGNMENT_DELAY m_pc$D_IN;
    if (m_rg_dst_data$EN)
      m_rg_dst_data <= `BSV_ASSIGNMENT_DELAY m_rg_dst_data$D_IN;
    if (m_rg_dst_reg$EN)
      m_rg_dst_reg <= `BSV_ASSIGNMENT_DELAY m_rg_dst_reg$D_IN;
    if (m_will_dirty_fpu_state$EN)
      m_will_dirty_fpu_state <= `BSV_ASSIGNMENT_DELAY
	  m_will_dirty_fpu_state$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    m_claimed_phy_reg = 1'h0;
    m_csr = 13'h0AAA;
    m_epochIncremented = 1'h0;
    m_fflags_rl = 5'h0A;
    m_iType = 5'h0A;
    m_ldKilled_rl = 3'h2;
    m_lsqAtCommitNotified_rl = 1'h0;
    m_lsqTag = 6'h2A;
    m_memAccessAtCommit_rl = 1'h0;
    m_nonMMIOStDone_rl = 1'h0;
    m_orig_inst = 32'hAAAAAAAA;
    m_pc = 64'hAAAAAAAAAAAAAAAA;
    m_ppc_vaddr_csrData_rl = 66'h2AAAAAAAAAAAAAAAA;
    m_rg_dst_data = 64'hAAAAAAAAAAAAAAAA;
    m_rg_dst_reg = 7'h2A;
    m_rob_inst_state_rl = 1'h0;
    m_spec_bits_rl = 12'hAAA;
    m_trap_rl = 6'h2A;
    m_tval_rl = 64'hAAAAAAAAAAAAAAAA;
    m_will_dirty_fpu_state = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishAlu_0_set &&
	  NOT_m_csr_96_BIT_12_79_EQ_setExecuted_doFinish_ETC___d381)
	$fdisplay(32'h80000002, "\n%m: ASSERT FAIL!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishAlu_0_set &&
	  NOT_m_csr_96_BIT_12_79_EQ_setExecuted_doFinish_ETC___d381)
	$display("Dynamic assertion failed: \"../../src_Core/RISCY_OOO/procs/lib/ReorderBuffer.bsv\", line 236, column 60\ncsr valid should match");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishAlu_0_set &&
	  NOT_m_csr_96_BIT_12_79_EQ_setExecuted_doFinish_ETC___d381)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishAlu_1_set &&
	  NOT_m_csr_96_BIT_12_79_EQ_setExecuted_doFinish_ETC___d389)
	$fdisplay(32'h80000002, "\n%m: ASSERT FAIL!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishAlu_1_set &&
	  NOT_m_csr_96_BIT_12_79_EQ_setExecuted_doFinish_ETC___d389)
	$display("Dynamic assertion failed: \"../../src_Core/RISCY_OOO/procs/lib/ReorderBuffer.bsv\", line 236, column 60\ncsr valid should match");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishAlu_1_set &&
	  NOT_m_csr_96_BIT_12_79_EQ_setExecuted_doFinish_ETC___d389)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_deqLSQ &&
	  m_trap_dummy2_0_read__98_AND_m_trap_dummy2_1_r_ETC___d303)
	$fdisplay(32'h80000002, "\n%m: ASSERT FAIL!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_deqLSQ &&
	  m_trap_dummy2_0_read__98_AND_m_trap_dummy2_1_r_ETC___d303)
	$display("Dynamic assertion failed: \"../../src_Core/RISCY_OOO/procs/lib/ReorderBuffer.bsv\", line 373, column 52\ncannot have trap");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_deqLSQ &&
	  m_trap_dummy2_0_read__98_AND_m_trap_dummy2_1_r_ETC___d303)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishMem &&
	  setExecuted_doFinishMem_access_at_commit &&
	  setExecuted_doFinishMem_non_mmio_st_done)
	$fdisplay(32'h80000002, "\n%m: ASSERT FAIL!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishMem &&
	  setExecuted_doFinishMem_access_at_commit &&
	  setExecuted_doFinishMem_non_mmio_st_done)
	$display("Dynamic assertion failed: \"../../src_Core/RISCY_OOO/procs/lib/ReorderBuffer.bsv\", line 266, column 18\ncannot both be true");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishMem &&
	  setExecuted_doFinishMem_access_at_commit &&
	  setExecuted_doFinishMem_non_mmio_st_done)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishMem &&
	  setExecuted_doFinishMem_non_mmio_st_done &&
	  m_iType != 5'd5)
	$fdisplay(32'h80000002, "\n%m: ASSERT FAIL!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishMem &&
	  setExecuted_doFinishMem_non_mmio_st_done &&
	  m_iType != 5'd5)
	$display("Dynamic assertion failed: \"../../src_Core/RISCY_OOO/procs/lib/ReorderBuffer.bsv\", line 270, column 35\nmust be St");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_setExecuted_doFinishMem &&
	  setExecuted_doFinishMem_non_mmio_st_done &&
	  m_iType != 5'd5)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[18])
	$fdisplay(32'h80000002, "\n%m: ASSERT FAIL!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[18])
	$display("Dynamic assertion failed: \"../../src_Core/RISCY_OOO/procs/lib/ReorderBuffer.bsv\", line 330, column 40\nld killed must be false");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[18]) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[15])
	$fdisplay(32'h80000002, "\n%m: ASSERT FAIL!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[15])
	$display("Dynamic assertion failed: \"../../src_Core/RISCY_OOO/procs/lib/ReorderBuffer.bsv\", line 331, column 48\nmem access at commit must be false");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[15]) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[14])
	$fdisplay(32'h80000002, "\n%m: ASSERT FAIL!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[14])
	$display("Dynamic assertion failed: \"../../src_Core/RISCY_OOO/procs/lib/ReorderBuffer.bsv\", line 332, column 42\nlsq notified must be false");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[14]) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[13])
	$fdisplay(32'h80000002, "\n%m: ASSERT FAIL!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[13])
	$display("Dynamic assertion failed: \"../../src_Core/RISCY_OOO/procs/lib/ReorderBuffer.bsv\", line 333, column 36\nnon mmio st must be false");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_enq && write_enq_x[13]) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkRobRowSynth

